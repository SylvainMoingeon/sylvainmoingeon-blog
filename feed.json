{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sylvain Moingeon",
    "description": "",
    "home_page_url": "https://www.sylvainmoingeon.fr",
    "feed_url": "https://www.sylvainmoingeon.fr/feed.json",
    "user_comment": "",
    "author": {
        "name": "Sylvain"
    },
    "items": [
        {
            "id": "https://www.sylvainmoingeon.fr/authentification-azure-directory-b2c-dans-une-application-xamarinforms/",
            "url": "https://www.sylvainmoingeon.fr/authentification-azure-directory-b2c-dans-une-application-xamarinforms/",
            "title": "Authentification Azure Directory B2C dans une application Xamarin.Forms",
            "summary": "<p>On m’a récemment demandé d’étudier la faisabilité d’une authentification depuis Azure Directory B2C dans une application Xamarin.Forms.</p><p>La documentation officielle a un peu tendance à tourner en rond avec des liens en références circulaires, le portail Azure est vaste et pas super user-friendly (on peut passer beaucoup de temps à chercher une option qu’on est pourtant certain d’avoir aperçue cinq minutes plus tôt…).</p><p>J’ai donc rédigé un guide rapide à l’attention des développeurs de l’équipe, je vous le livre tel quel, ce n’est donc pas nécessairement très bien rédigé, mais vous aurez toutes les informations pour débuter, depuis la création du <em>Directory B2C</em> sur Azure jusqu’à l’authentification et la récupération des données de l’utilisateur dans l’application Xamarin.Forms.</p>",
            "content_html": "<p>On m’a récemment demandé d’étudier la faisabilité d’une authentification depuis Azure Directory B2C dans une application Xamarin.Forms.</p><p>La documentation officielle a un peu tendance à tourner en rond avec des liens en références circulaires, le portail Azure est vaste et pas super user-friendly (on peut passer beaucoup de temps à chercher une option qu’on est pourtant certain d’avoir aperçue cinq minutes plus tôt…).</p><p>J’ai donc rédigé un guide rapide à l’attention des développeurs de l’équipe, je vous le livre tel quel, ce n’est donc pas nécessairement très bien rédigé, mais vous aurez toutes les informations pour débuter, depuis la création du <em>Directory B2C</em> sur Azure jusqu’à l’authentification et la récupération des données de l’utilisateur dans l’application Xamarin.Forms.</p>\n\n<h1 id=\"résumé\">Résumé</h1>\n<ol>\n<li>Créer un tenant <em>Active Directory B2C</em> dans Azure.</li>\n<li>Enregistrer l’application mobile dans le tenant <em>Active Directory B2C</em>.</li>\n<li>Créer des <em>User Flows</em> avec des polices de <em>Signin</em>, réinitialisation de mot de passe…</li>\n<li>Utiliser la <em>Microsoft Authentication Library (MSAL)</em> pour gérer le flux d’authentification dans l’application.</li>\n</ol>\n<h2 id=\"sources\">Sources</h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/data-cloud/authentication/azure-ad-b2c\">Authenticate Users with Azure Active Directory B2C</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-create-tenant\">Tutorial: Create an Azure Active Directory B2C tenant</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/active-directory-b2c/tutorial-register-applications?tabs=app-reg-ga\">Tutorial: Register a web application in Azure Active Directory B2C</a></li>\n</ul>\n<h1 id=\"côté-serveur\">Côté serveur</h1>\n<h2 id=\"création-du-compte-azure\">Création du compte Azure</h2>\n<p><a href=\"https://aka.ms/azfree-docs-mobileapps\">https://aka.ms/azfree-docs-mobileapps</a></p><p>Pré-requis :</p><ul>\n<li>Un compte microsoft</li>\n<li>Une carte bancaire</li>\n</ul>\n<p>Je ne détaille pas, il suffit de suivre les étapes. Sachez simplement que vous disposez d’un crédit de 170€ pour débuter, de quoi faire des tests et de l’autoformation.</p><h2 id=\"configuration-du-portail-en-anglais\">Configuration du portail en ANGLAIS</h2>\n<p>Très important, peut-être un bug temporaire, mais si vous conservez le portail en français, la création de AD B2C échouera avec un message abscons vous indiquant que la valeur de <em>l’emplacement du groupe de ressource</em> est invalide alors qu’on la sélectionne dans une liste (et peu importe la valeur sélectionnée) !</p><p>C’est simplement que la liste est traduite et que visiblement quelque part dans le code, Azure attend une valeur en dur tirée de la liste en anglais. Franchement, j’ai honte pour Microsoft !</p><p>Donc évitons-nous bien des soucis et passons immédiatement le portail en anglais.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/6ce4a4c4b1004751bddf92e7f88a9f98.png\" alt=\"Configuration du portail en anglais\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/6ce4a4c4b1004751bddf92e7f88a9f98-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/6ce4a4c4b1004751bddf92e7f88a9f98-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/6ce4a4c4b1004751bddf92e7f88a9f98-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/6ce4a4c4b1004751bddf92e7f88a9f98-lg.png 1024w\"></figure></p><h2 id=\"enregistrement-du-namespace-mirosoftazureactivedirectory\">Enregistrement du namespace <em>Mirosoft.AzureActiveDirectory</em></h2>\n<p>Aucun tuto ne vous le dira, et c’est peut-être un bug temporaire, mais si vous ne le faites pas maintenant, vous obtiendrez cette erreur à la toute fin du processus et vous devrez tout recommencer. :-)</p><figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/eae4e6e303ba45cfaf377ae3ab2f522e.png\" alt=\"Message d&#39;erreur concernant Microsoft.AzureActiveDirectory\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/eae4e6e303ba45cfaf377ae3ab2f522e-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/eae4e6e303ba45cfaf377ae3ab2f522e-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/eae4e6e303ba45cfaf377ae3ab2f522e-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/eae4e6e303ba45cfaf377ae3ab2f522e-lg.png 1024w\"></figure><p><strong>Cliquez sur <em>Subscriptions</em></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/d821b9e2f1a84d46b574a439df9c1fc9.png\" alt=\"Navigation vers les subscriptions\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/d821b9e2f1a84d46b574a439df9c1fc9-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/d821b9e2f1a84d46b574a439df9c1fc9-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/d821b9e2f1a84d46b574a439df9c1fc9-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/d821b9e2f1a84d46b574a439df9c1fc9-lg.png 1024w\"></figure></p><p><strong>Dans la liste, sélectionnez votre subscription courante.</strong></p><p>Si vous venez de créer un compte gratuit, il n’y en aura qu’une :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/13427f5008fb459db2ea5276dd729262.png\" alt=\"Sélection de la subscription\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/13427f5008fb459db2ea5276dd729262-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/13427f5008fb459db2ea5276dd729262-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/13427f5008fb459db2ea5276dd729262-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/13427f5008fb459db2ea5276dd729262-lg.png 1024w\"></figure></p><p><strong>Dans le panneau de gauche, cliquez sur <em>Resource providers</em></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/979a2d1abb4a48b59a7bf9ad8486880f.png\" alt=\"Navigation vers les resource providers\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/979a2d1abb4a48b59a7bf9ad8486880f-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/979a2d1abb4a48b59a7bf9ad8486880f-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/979a2d1abb4a48b59a7bf9ad8486880f-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/979a2d1abb4a48b59a7bf9ad8486880f-lg.png 1024w\"></figure></p><p><strong>Cherchez Azure, sélectionnez <em>Microsoft.AzureActiveDirectory</em> et <strong>cliquez sur Register</strong></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/8fa48e6076574a9eb090837d9231fd87.png\" alt=\"Recherche de Microsoft.AzureActiveDirectory\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fa48e6076574a9eb090837d9231fd87-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fa48e6076574a9eb090837d9231fd87-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fa48e6076574a9eb090837d9231fd87-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fa48e6076574a9eb090837d9231fd87-lg.png 1024w\"></figure></p><p>Patientez… patientez… patientez… patientez…\nCliquez de temps en temps sur <em>Refresh</em> au cas où.\nSi ça ne fonctionne pas, recommencez (sélection, register), au bout d’un moment ça finit par passer. :-)\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/941ed15f975649aca20eeb624c4192fd.png\" alt=\"Microsoft.AzureActiveDirectory est enregistré\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/941ed15f975649aca20eeb624c4192fd-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/941ed15f975649aca20eeb624c4192fd-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/941ed15f975649aca20eeb624c4192fd-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/941ed15f975649aca20eeb624c4192fd-lg.png 1024w\"></figure></p><p>C’est bon, on y est, on peut commencer !</p><h2 id=\"création-de-lactive-directory-b2c\">Création de l’Active Directory B2C</h2>\n<p><strong>Cliquez sur <em>Create a resource</em></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/26cd2d69e0cf4e2c9533a45c7ef1e726.png\" alt=\"Créer une ressources\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/26cd2d69e0cf4e2c9533a45c7ef1e726-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/26cd2d69e0cf4e2c9533a45c7ef1e726-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/26cd2d69e0cf4e2c9533a45c7ef1e726-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/26cd2d69e0cf4e2c9533a45c7ef1e726-lg.png 1024w\"></figure></p><p><strong>Cherchez et sélectionnez <em>Active Directory B2C</em></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/3734c6c0c609497b8523c2ac5ee56045.png\" alt=\"Sélectionner Active Directory B2C\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/3734c6c0c609497b8523c2ac5ee56045-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/3734c6c0c609497b8523c2ac5ee56045-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/3734c6c0c609497b8523c2ac5ee56045-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/3734c6c0c609497b8523c2ac5ee56045-lg.png 1024w\"></figure></p><p><strong>Cliquez sur <em>Create</em></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/8fb8757ce94343aea6ddb6b375e139ac.png\" alt=\"Cliquer sur Create\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fb8757ce94343aea6ddb6b375e139ac-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fb8757ce94343aea6ddb6b375e139ac-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fb8757ce94343aea6ddb6b375e139ac-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/8fb8757ce94343aea6ddb6b375e139ac-lg.png 1024w\"></figure></p><p><strong>Create a New Azure AD B2C tenant</strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/0f44978924974827b83e5498624e1827.png\" alt=\"Create a New Azure AD B2C tenant\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/0f44978924974827b83e5498624e1827-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/0f44978924974827b83e5498624e1827-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/0f44978924974827b83e5498624e1827-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/0f44978924974827b83e5498624e1827-lg.png 1024w\"></figure></p><p><strong>Renseignez les informations du tenant</strong></p><p>Créer un <em>Groupe de ressources</em> avec le lien <em>Create New</em> s’il n’en existe pas déjà un.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/bfa01cbf52b14c7b9969c162f08e83ba.png\" alt=\"Renseigner les informations du tenant\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/bfa01cbf52b14c7b9969c162f08e83ba-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bfa01cbf52b14c7b9969c162f08e83ba-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bfa01cbf52b14c7b9969c162f08e83ba-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bfa01cbf52b14c7b9969c162f08e83ba-lg.png 1024w\"></figure></p><p><strong>Cliquez sur <em>Review + Create</em> pour valider les informations</strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/eeac2be3682d457dae69874ee0e04525.png\" alt=\"Valider les informations\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/eeac2be3682d457dae69874ee0e04525-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/eeac2be3682d457dae69874ee0e04525-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/eeac2be3682d457dae69874ee0e04525-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/eeac2be3682d457dae69874ee0e04525-lg.png 1024w\"></figure></p><p><strong>Cliquez sur <em>Create</em> pour en finir !</strong></p><p>Patientez. Tant que ça gigote là-dedans c’est que ça bosse :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/2fdbea7151f948278ae450c27839495d.png\" alt=\"Indicateur d&#39;activité dans la toolbar\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/2fdbea7151f948278ae450c27839495d-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/2fdbea7151f948278ae450c27839495d-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/2fdbea7151f948278ae450c27839495d-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/2fdbea7151f948278ae450c27839495d-lg.png 1024w\"></figure></p><p>Cliquez sur le lien, bienvenue à Black Mesa !\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/000cf65ea90e48b0b774d8405119b298.png\" alt=\"Lien menant vers votre tenant Active Directory B2C\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/000cf65ea90e48b0b774d8405119b298-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/000cf65ea90e48b0b774d8405119b298-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/000cf65ea90e48b0b774d8405119b298-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/000cf65ea90e48b0b774d8405119b298-lg.png 1024w\"></figure></p><h2 id=\"configuration-dune-application-côté-serveur\">Configuration d’une <em>application</em> côté serveur</h2>\n<h3 id=\"selection-du-tenant-b2c\">Selection du tenant B2C</h3>\n<p>Dans la toolbar en haut à droite, trouvez le bouton qui ressemble à un carnet avec un entonnoir :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/0dc10f53aef94e8cb578f3eb0351b5bc.png\" alt=\"Buton de sélection des directories\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/0dc10f53aef94e8cb578f3eb0351b5bc-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/0dc10f53aef94e8cb578f3eb0351b5bc-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/0dc10f53aef94e8cb578f3eb0351b5bc-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/0dc10f53aef94e8cb578f3eb0351b5bc-lg.png 1024w\"></figure></p><p>Mais en principe vous devriez déjà être dessus si vous avez cliqué sur le lien à la fin de l’étape précédente.</p><p>Si vous vous retrouvez sur une page d’accueil comme ça et que vous ne retrouvez pas votre <em>tenant AD B2C</em>…\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/619e486c4a054f2cb3ee928a143a1963.png\" alt=\"Page d&#39;accueil du Directory\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/619e486c4a054f2cb3ee928a143a1963-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/619e486c4a054f2cb3ee928a143a1963-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/619e486c4a054f2cb3ee928a143a1963-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/619e486c4a054f2cb3ee928a143a1963-lg.png 1024w\"></figure></p><p>Saisissez simplement <em>B2C</em> dans la barre de recherche en haut et dans la rubrique <em>Services</em>, sélectionnez <em>Azure AD B2C</em>.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/636efe75e666412e9c7584f700c45f51.png\" alt=\"Recherche du tenant B2C\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/636efe75e666412e9c7584f700c45f51-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/636efe75e666412e9c7584f700c45f51-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/636efe75e666412e9c7584f700c45f51-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/636efe75e666412e9c7584f700c45f51-lg.png 1024w\"></figure></p><h3 id=\"enregistrement-de-lapplication\">Enregistrement de l’application</h3>\n<p><strong>Sélectionnez <em>App registrations</em>…</strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/1c9cbee5394f46a397a8efbdcf1dc132.png\" alt=\"Navigation vers l&#39;enregistrement d&#39;applications\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/1c9cbee5394f46a397a8efbdcf1dc132-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/1c9cbee5394f46a397a8efbdcf1dc132-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/1c9cbee5394f46a397a8efbdcf1dc132-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/1c9cbee5394f46a397a8efbdcf1dc132-lg.png 1024w\"></figure></p><p><strong>Puis <em>New registration</em></strong>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/5f5448c2423e48b4bdbc92b536d2453d.png\" alt=\"Nouvel enregistrement\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/5f5448c2423e48b4bdbc92b536d2453d-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/5f5448c2423e48b4bdbc92b536d2453d-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/5f5448c2423e48b4bdbc92b536d2453d-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/5f5448c2423e48b4bdbc92b536d2453d-lg.png 1024w\"></figure></p><p><strong>Renseignez les informations</strong></p><ul>\n<li><p><em>Nom</em> et <em>type de compte</em> supporté :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/ebba5c97abd241ac81af607acb811a19.png\" alt=\"Nom et type de compte\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/ebba5c97abd241ac81af607acb811a19-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ebba5c97abd241ac81af607acb811a19-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ebba5c97abd241ac81af607acb811a19-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ebba5c97abd241ac81af607acb811a19-lg.png 1024w\"></figure></p></li>\n<li><p><em>Redirect URI</em> :\n  Cela dépend du type d’application (application mobile, web app…).\n  Dans notre cas, il s’agira d’une application mobile Xamarin.Forms.\n  <strong>Attention, l’uri répond à un schéma bien particulier :</strong>\n  <code>msal[redirect_uri]://auth</code>.\n  <figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/f551892b4b9f48a8973694ff7473b391.png\" alt=\"Redirect URi\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/f551892b4b9f48a8973694ff7473b391-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f551892b4b9f48a8973694ff7473b391-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f551892b4b9f48a8973694ff7473b391-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f551892b4b9f48a8973694ff7473b391-lg.png 1024w\"></figure></p></li>\n</ul>\n<p>Cet URi sera à renseigner dans les manifestes Android et iOS.</p><ul>\n<li><em>Permissions :</em></li>\n</ul>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/f6990694e50e4f59bbf304ab240ed75f.png\" alt=\"Permisssions\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/f6990694e50e4f59bbf304ab240ed75f-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f6990694e50e4f59bbf304ab240ed75f-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f6990694e50e4f59bbf304ab240ed75f-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f6990694e50e4f59bbf304ab240ed75f-lg.png 1024w\"></figure><p>Validez le tout en cliquant sur le bouton <em>Register</em>.\nBravo ! Votre application est enregistrée :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/21fa88ac0c1e4b8d97cba7c22496698f.png\" alt=\"Application enregistrée\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/21fa88ac0c1e4b8d97cba7c22496698f-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/21fa88ac0c1e4b8d97cba7c22496698f-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/21fa88ac0c1e4b8d97cba7c22496698f-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/21fa88ac0c1e4b8d97cba7c22496698f-lg.png 1024w\"></figure></p><h3 id=\"mais-ce-nest-pas-fini--la-case-à-cocher-secrète\">Mais ce n’est pas fini : la case à cocher secrète</h3>\n<p>Si vous vous en tenez là et suivez le tuto Microsoft et l’application <em>Sample</em> fournie, cela ne fonctionnera pas : les URI utilisés comme point d’accès dans l’application ne sont pas autorisés par défaut !</p><p>Rendez-vous dans la rubrique <em>Authentication</em> et cochez les cases :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/cde6cd6048fa407e81ed0c4ba8559687.png\" alt=\"Cocher les Uri d&#39;authentification\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/cde6cd6048fa407e81ed0c4ba8559687-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/cde6cd6048fa407e81ed0c4ba8559687-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/cde6cd6048fa407e81ed0c4ba8559687-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/cde6cd6048fa407e81ed0c4ba8559687-lg.png 1024w\"></figure></p><p>Pensez bien à sauvegarder. Le bouton en haut, je vous laisse le trouver tout seul.</p><h3 id=\"création-des-user-flows\">Création des <em>User Flows</em></h3>\n<p>Créer un <em>user flow</em> revient à autoriser les utilisateurs à interagir avec leur compte AD : se connecter, réinitialiser son mot de passe, modifier son profile…</p><p>NB : les flows sont partageables entre les applications.</p><h4 id=\"sign-in\">Sign In</h4>\n<p>Au minima, les utilisateurs auront besoin de se connecter.\nDans la page de votre <em>tenant AD B2C</em>, allez sur <em>User flows</em> dans la rubrique <em>Policies</em> et cliquez sur <em>New user flow</em>.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/ff407a8e293349ff8cc82e83e5a3e4c7.png\" alt=\"New User Flow\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff407a8e293349ff8cc82e83e5a3e4c7-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff407a8e293349ff8cc82e83e5a3e4c7-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff407a8e293349ff8cc82e83e5a3e4c7-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff407a8e293349ff8cc82e83e5a3e4c7-lg.png 1024w\"></figure></p><p>Puis sélectionnez <em>Sign In</em> et créez le flow dans sa version recommandée.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/436019a0fe0643ebbcb99156b00edbbe.png\" alt=\"Signin User Flow\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/436019a0fe0643ebbcb99156b00edbbe-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/436019a0fe0643ebbcb99156b00edbbe-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/436019a0fe0643ebbcb99156b00edbbe-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/436019a0fe0643ebbcb99156b00edbbe-lg.png 1024w\"></figure></p><p>Renseignez les informations en fonction du mode de connexion et de l’authentification multiple souhaités.</p><p>Notez bien le nom, vous en aurez besoin côté client :\n<figure class=\"post__image\"><img decoding=\"async\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/67382c4d40224b36a0f04c9054364cae.png\" alt=\"Nom de la police\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/67382c4d40224b36a0f04c9054364cae-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/67382c4d40224b36a0f04c9054364cae-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/67382c4d40224b36a0f04c9054364cae-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/67382c4d40224b36a0f04c9054364cae-lg.png 1024w\"></figure></p><p>La dernière rubrique permet de sélectionner les données qui seront récupérées côté client lors de la connexion utilisateur. Cliquez sur <em>Show more…</em> pour obtenir la liste complète.</p><figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/f65a66c9662f40dc9aaf15676ed7bd5a.png\" alt=\"Claims\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/f65a66c9662f40dc9aaf15676ed7bd5a-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f65a66c9662f40dc9aaf15676ed7bd5a-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f65a66c9662f40dc9aaf15676ed7bd5a-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/f65a66c9662f40dc9aaf15676ed7bd5a-lg.png 1024w\"></figure><p>Finalisez en cliquant sur le bouton <em>Create</em>.</p><h4 id=\"autres-flows\">Autres flows</h4>\n<p>La procédure est similaire pour les autres types de <em>flows</em>. Créez ceux dont vous avez besoin.</p><h3 id=\"création-des-utilisateurs\">Création des utilisateurs</h3>\n<p>Sur la page de votre <em>tenant Azure AD B2C</em>, cliquez sur <em>Users</em> dans la rubrique <em>Manage</em>.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/ce85fccb56374fcab27e51b008093cde.png\" alt=\"Création des utilisateurs\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/ce85fccb56374fcab27e51b008093cde-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ce85fccb56374fcab27e51b008093cde-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ce85fccb56374fcab27e51b008093cde-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ce85fccb56374fcab27e51b008093cde-lg.png 1024w\"></figure></p><p>Ensuite, cela dépend du mode de connexion envisagé.\nIl sera peut-être nécessaire de d’abord configurer un ou plusieurs fournisseurs d’identité (compte Microsoft, compte local, Github, Facebook…), dans la même rubrique que précédemment, lien <em>Identity providers</em>.</p><p>A priori, tout est en place côté serveur, reste à implémenter la couche MSAL côté client.</p><h1 id=\"côté-client\">Côté client</h1>\n<h2 id=\"package-nuget-microsoft-authentication-library-msal\">Package nuget <em>Microsoft Authentication Library (MSAL)</em></h2>\n<p>Direction le nuget package manager.\nInstallez <em>Microsoft.Identity.Client</em> sur le projet commun et les projets des plateformes :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/bf2ed89bfb2644a79b5f1cd0c9857761.png\" alt=\"Package nuget Microsoft.Identity.Client\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/bf2ed89bfb2644a79b5f1cd0c9857761-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bf2ed89bfb2644a79b5f1cd0c9857761-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bf2ed89bfb2644a79b5f1cd0c9857761-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bf2ed89bfb2644a79b5f1cd0c9857761-lg.png 1024w\"></figure></p><h2 id=\"préparation-du-projet-commun\">Préparation du projet commun</h2>\n<h3 id=\"définition-de-quelques-constantes\">Définition de quelques constantes</h3>\n<p>Pour commencer, il est nécessaire de définir quelques constantes.</p><ul>\n<li><p><code>tenantName</code> : le nom de domaine que vous avez défini pour votre tenant Directory B2C</p></li>\n<li><p><code>tenantId</code> : le même suffixé par <code>.onmicrosoft.com</code></p></li>\n<li><p><code>clientId</code> : <em>Application (client) Id</em>, vous trouverez cette information dans l’<em>overview</em> de votre application sur le portail Azure :\n  <figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/99664b9fc9504d75b03489fffe708bfe.png\" alt=\"ClientId dans l&#39;overview de l&#39;application\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/99664b9fc9504d75b03489fffe708bfe-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/99664b9fc9504d75b03489fffe708bfe-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/99664b9fc9504d75b03489fffe708bfe-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/99664b9fc9504d75b03489fffe708bfe-lg.png 1024w\"></figure></p></li>\n<li><p><code>redirect_uri</code> : l’uri enregistré côté azure</p></li>\n<li><p><code>policySignin</code> et <code>policyPassword</code> : le nom des polices telles que vous les avez définies précédemment</p></li>\n<li><p><code>iosKeychainSecurityGroup</code> : identifiant du Bundle iOS que vous trouvez dans <code>Info.plist</code>.</p></li>\n</ul>\n<pre><code class=\"language-csharp\">public static class Constants\n{\n    const string tenantName = &quot;[your_tenant_name]&quot;;\n    const string tenantId = &quot;[your_tenant_name].onmicrosoft.com&quot;;\n    const string clientId = &quot;[your_application_client_id]&quot;;\n    const string redirectUri = &quot;[redirect_uri]&quot;;\n    const string policySignin = &quot;B2C_1_signin&quot;;\n    const string policyPassword = &quot;B2C_1_resetpassword&quot;;\n    const string iosKeychainSecurityGroup = &quot;[application iOS Bundle identifier]&quot;;\n    \n    static readonly string[] scopes = { &quot;&quot; };\n    static readonly string authorityBase = $&quot;https://{tenantName}.b2clogin.com/tfp/{tenantId}/&quot;;\n\n    public static string RedirectMsalScheme =&gt; $&quot;msal{redirectUri}://auth&quot;; \n    public static string AuthorityBase =&gt; authorityBase;\n    public static string[] Scopes =&gt; scopes;\n    public static string PolicySignin =&gt; policySignin;\n    public static string PolicyPassword =&gt; policyPassword;\n    public static string IosKeychainSecurityGroups =&gt; iosKeychainSecurityGroup;\n    public static string ClientId =&gt; clientId;\n    public static string AuthoritySignin =&gt; $&quot;{authorityBase}{policySignin}&quot;;\n    public static string AuthorityPasswordReset =&gt; $&quot;{authorityBase}{policyPassword}&quot;;\n}\n</code></pre>\n<h3 id=\"le-service-dauthentification--authenticationclient\">Le service d’authentification : <code>AuthenticationClient</code></h3>\n<p>Dans le fichier <code>App.xaml.cs</code>, définir les propriétés <code>AppUi</code> (nécessaire pour l’implémentation dans Android) et <code>AuthenticationClient</code> :</p><pre><code class=\"language-csharp\">using Microsoft.Identity.Client;\n[...]\n\npublic partial class App : Application\n{\n    public static IPublicClientApplication AuthenticationClient { get; private set; }\n    public static object UIParent { get; set; } = null;\n    \n    [...]\n}\n</code></pre>\n<p>Le service d’authentification implémente <code>IPublicClientApplication</code>, pour l’instancier, on utilise le builder <code>PublicClientApplicationBuilder</code> :</p><pre><code class=\"language-csharp\">public App()\n{\n    InitializeComponent();\n\n    AuthenticationClient = PublicClientApplicationBuilder.Create(Constants.ClientId)\n            .WithIosKeychainSecurityGroup(Constants.IosKeychainSecurityGroups)\n            .WithB2CAuthority(Constants.AuthoritySignin)\n            .WithRedirectUri(Constants.RedirectMsalScheme)\n            .Build();\n    [...]\n}\n</code></pre>\n<h2 id=\"configuration-de-lapplication-ios\">Configuration de l’application iOS</h2>\n<h3 id=\"infoplist\">Info.plist</h3>\n<p>Souvenez-vous côté serveur, vous avez configuré un <em>Redirect Uri</em> sous la forme <code>msal[redirect_uri]://auth</code></p><p>Il s’agit ici de renseigner cette valeur dans le fichier Info.plist du projet iOS.\nCela se passe dans l’onglet <em>Advanced</em>, rubrique <em>URL Types</em> :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/e69e5ca4a86d40aaba291deee5c60caf.png\" alt=\"Redirect Uri dans Info.plist\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/e69e5ca4a86d40aaba291deee5c60caf-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/e69e5ca4a86d40aaba291deee5c60caf-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/e69e5ca4a86d40aaba291deee5c60caf-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/e69e5ca4a86d40aaba291deee5c60caf-lg.png 1024w\"></figure></p><h3 id=\"keychain-dans-entitlementsplist\">Keychain dans Entitlements.plist</h3>\n<p>Il est ensuite nécessaire d’enregistrer un Keychain dans <em>Entitlements.plist</em> :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/ed660e0f6cf54409b5237432c27a3909.png\" alt=\"Keychain dans Entitlements.plist\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/ed660e0f6cf54409b5237432c27a3909-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ed660e0f6cf54409b5237432c27a3909-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ed660e0f6cf54409b5237432c27a3909-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ed660e0f6cf54409b5237432c27a3909-lg.png 1024w\"></figure></p><p>Si cela ne s’est pas fait automatiquement, vérifiez bien que le fichier <em>Entitlements.plist</em> est sélectionné comme <em>Custom Entitlements</em> dans l’onglet <em>iOS Bundle Signing</em> du projet iOS.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/bd0f850cd2e8445688885dbc6c689b59.png\" alt=\"Custom Entitlements\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/bd0f850cd2e8445688885dbc6c689b59-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bd0f850cd2e8445688885dbc6c689b59-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bd0f850cd2e8445688885dbc6c689b59-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bd0f850cd2e8445688885dbc6c689b59-lg.png 1024w\"></figure></p><p>Faîtes-le bien pour chacune de vos configurations de Build, sinon vous aurez une exception à l’exécution concernant le Keychain !</p><h3 id=\"surcharge-de-la-méthode-openurl-dans-appdelegate\">Surcharge de la méthode OpenUrl dans AppDelegate</h3>\n<pre><code class=\"language-csharp\">using Microsoft.Identity.Client;\n[...]\n\n[Register(&quot;AppDelegate&quot;)]\npublic partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate\n{\n    [...]\n    \n    public override bool OpenUrl(UIApplication app, NSUrl url, NSDictionary options)\n    {\n        AuthenticationContinuationHelper.SetAuthenticationContinuationEventArgs(url);\n        return base.OpenUrl(app, url, options);\n    }\n}\n</code></pre>\n<h2 id=\"configuration-lapplication-android\">Configuration l’application Android</h2>\n<h3 id=\"manifeste\">Manifeste</h3>\n<p>Comme pour iOS, le <em>Redirect Uri</em> doit être déclaré dans le manifeste Android.</p><pre><code class=\"language-xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;1&quot; android:versionName=&quot;1.0&quot; package=&quot;com.companyname.adb2capp&quot;&gt;\n    &lt;uses-sdk android:minSdkVersion=&quot;21&quot; android:targetSdkVersion=&quot;30&quot; /&gt;\n    &lt;application android:label=&quot;ADB2CApp.Android&quot; android:theme=&quot;@style/MainTheme&quot;&gt;\n        \n        &lt;!-- MSAL REGISTRATION START --&gt;\n        &lt;activity android:name=&quot;microsoft.identity.client.BrowserTabActivity&quot;&gt;\n            &lt;intent-filter&gt;\n                &lt;action android:name=&quot;android.intent.action.VIEW&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;\n                &lt;category android:name=&quot;android.intent.category.BROWSABLE&quot; /&gt;\n                &lt;data android:scheme=&quot;msal[redirect_uri]&quot; android:host=&quot;auth&quot; /&gt;\n            &lt;/intent-filter&gt;\n        &lt;/activity&gt;\n        &lt;!-- MSAL REGISTRATION END --&gt;\n    &lt;/application&gt;\n    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;\n&lt;/manifest&gt;\n</code></pre>\n<h3 id=\"modifications-dans-mainactivity\">Modifications dans <em>MainActivity</em></h3>\n<p>L’authentification MSAL nécessite :</p><ul>\n<li>De passer l’activity à <em>App.UIParent</em></li>\n<li>De surcharger <em>OnActivityResult</em></li>\n</ul>\n<pre><code class=\"language-csharp\">using Microsoft.Identity.Client;\n[...]\n\npublic class MainActivity : FormsAppCompatActivity\n{\n    protected override void OnCreate(Bundle bundle)\n    {\n        TabLayoutResource = Resource.Layout.Tabbar;\n        ToolbarResource = Resource.Layout.Toolbar;\n\n        base.OnCreate(bundle);\n\n        Xamarin.Essentials.Platform.Init(this, savedInstanceState);\n        global::Xamarin.Forms.Forms.Init(this, savedInstanceState);\n        LoadApplication(new App());\n        // ADDED\n        App.UIParent = this;\n    }\n\n    // OVERRIDED\n    protected override void OnActivityResult(int requestCode, Result resultCode, Intent data)\n    {\n        base.OnActivityResult(requestCode, resultCode, data);\n        AuthenticationContinuationHelper.SetAuthenticationContinuationEventArgs(requestCode, resultCode, data);\n    }\n    \n    [...]\n}\n</code></pre>\n<h2 id=\"implémentation-dans-le-projet-xamarinforms\">Implémentation dans le projet Xamarin.Forms</h2>\n<h3 id=\"création-dune-page-de-login\">Création d’une page de Login</h3>\n<p>On va faire super simple, créez une page <code>LoginPage.xaml</code>, ajoutez-y un bouton <code>Login</code> et abonnez-le à l’événement <code>Clicked</code>.</p><pre><code class=\"language-xml\">&lt;ContentPage.Content&gt;\n    &lt;Button x:Name=&quot;LoginButton&quot;\n        Text=&quot;LOGIN&quot;\n        Clicked=&quot;LoginButton_Clicked&quot;\n        VerticalOptions=&quot;Center&quot;\n        HorizontalOptions=&quot;Center&quot;\n        /&gt;\n&lt;/ContentPage.Content&gt;\n</code></pre>\n<p>Visuellement, difficile de faire plus basique :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/c2336499611b40d4a380610ef52dabe7.png\" alt=\"Login Page\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/c2336499611b40d4a380610ef52dabe7-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/c2336499611b40d4a380610ef52dabe7-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/c2336499611b40d4a380610ef52dabe7-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/c2336499611b40d4a380610ef52dabe7-lg.png 1024w\"></figure></p><p>A l’apparition de la page, appelez <code>AcquireTokenSilentAsync</code> pour rafraîchir le token d’authentification, au cas où un utilisateur soit déjà authentifié.</p><pre><code class=\"language-csharp\">public partial class LoginPage : ContentPage\n{\n    [...]\n\n    protected override async void OnAppearing()\n    {\n        try\n        {\n            // Look for existing account\n            IEnumerable&lt;IAccount&gt; accounts = await App.AuthenticationClient.GetAccountsAsync();\n            \n            AuthenticationResult result = await App.AuthenticationClient\n                .AcquireTokenSilent(Constants.Scopes, accounts.FirstOrDefault())\n                .ExecuteAsync();\n                \n            await Navigation.PushAsync(new LogoutPage(result));\n        }\n        catch\n        {\n            // Do nothing - the user isn&#39;t logged in\n        }\n        base.OnAppearing();\n    }\n\n    [...]\n}\n</code></pre>\n<p>Au clic sur le bouton, <code>AcquireTokenInteractive</code> est utilisé pour ouvrir le navigateur de l’appareil et afficher la page de Signin.</p><ul>\n<li>Si la connexion réussit le résultat de l’authentification est passé à la page <code>LogoutPage</code>.</li>\n<li>Si l’utilisateur clique sur l’option “j’ai oublié mon mot de passe”, une exception particulière est interceptée pour lancer la procédure de récupération de mot de passe.</li>\n</ul>\n<pre><code class=\"language-csharp\">private async void LoginButton_Clicked(object sender, EventArgs e)\n{\n    AuthenticationResult result;\n    try\n    {\n        result = await App.AuthenticationClient\n            .AcquireTokenInteractive(Constants.Scopes)\n            .WithPrompt(Prompt.SelectAccount)\n            .WithParentActivityOrWindow(App.UIParent)\n            .ExecuteAsync();\n\n        await Navigation.PushAsync(new LogoutPage(result));\n    }\n    catch (MsalException ex)\n    {\n        if (ex.Message != null &amp;&amp; ex.Message.Contains(&quot;AADB2C90118&quot;))\n        {\n            result = await OnForgotPassword();\n            await Navigation.PushAsync(new LogoutPage(result));\n        }\n        else if (ex.ErrorCode != &quot;authentication_canceled&quot;)\n        {\n            await DisplayAlert(&quot;An error has occurred&quot;, &quot;Exception message: &quot; + ex.Message, &quot;Dismiss&quot;);\n        }\n    }\n}\n</code></pre>\n<p>Et voici le code pour la réinitialisation du mot de passe :</p><pre><code class=\"language-csharp\">private async Task&lt;AuthenticationResult&gt; OnForgotPassword()\n{\n    try\n    {\n        return await App.AuthenticationClient\n            .AcquireTokenInteractive(Constants.Scopes)\n            .WithPrompt(Prompt.SelectAccount)\n            .WithParentActivityOrWindow(App.UIParent)\n            .WithB2CAuthority(Constants.AuthorityPasswordReset)\n            .ExecuteAsync();\n    }\n    catch (MsalException)\n    {\n        // Do nothing - ErrorCode will be displayed in OnLoginButtonClicked\n        return null;\n    }\n}\n</code></pre>\n<p>Une fois la page créée, remplacez <code>MainPage</code> dans <code>App</code> par une <code>NavigationPage</code> : <code>MainPage = new NavigationPage(new LoginPage());</code> de façon à naviguer directement sur la <code>LoginPage</code> à l’ouverture de l’application.</p><h3 id=\"création-dune-page-de-logout\">Création d’une page de logout</h3>\n<p>La page <code>LogoutPage</code> est très similaire à la page de login à ceci près :</p><ul>\n<li>Son constructeur reçoit en paramètre le résultat de l’authentification</li>\n<li>Un <code>Label</code> affiche les informations de base de l’utilisateur</li>\n<li>Le bouton <code>Login</code> est remplacé par un bouton <code>Logout</code></li>\n</ul>\n<pre><code class=\"language-xml\">&lt;ContentPage.Content&gt;\n    &lt;StackLayout VerticalOptions=&quot;Center&quot; HorizontalOptions=&quot;Center&quot;&gt;\n        &lt;Label x:Name=&quot;UserInfoLabel&quot;\n                   FontSize=&quot;Large&quot;\n                   HorizontalTextAlignment=&quot;Center&quot;\n                   /&gt;\n        &lt;Button x:Name=&quot;LogoutButton&quot;\n                    Text=&quot;LOGOUT&quot;\n                    Clicked=&quot;LogoutButton_Clicked&quot;\n                    HorizontalOptions=&quot;Center&quot;\n                    VerticalOptions=&quot;Center&quot;\n                    /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage.Content&gt;\n</code></pre>\n<p>Commençons par récupérer l’<code>AuthenticationResult</code> dans le constructeur de la page :</p><pre><code class=\"language-csharp\">AuthenticationResult authenticationResult;\npublic LogoutPage(AuthenticationResult result)\n{\n    InitializeComponent();\t\n    authenticationResult = result;\n}\n</code></pre>\n<h4 id=\"les-informations-utilisateur-claims\">Les informations utilisateur (Claims)</h4>\n<p>Les informations concernant l’utilisateur, celles que vous avez sélectionnées parmi les <code>Claims</code> lors de la création de votre <code>User Flow Signin</code> sont codées dans la propriété <code>authenticationResult.IdToken</code> sous la forme d’un <strong><a href=\"https://fr.wikipedia.org/wiki/JSON_Web_Token\">token jwt</a>.</strong>\nPour le décoder, vous aurez besoin d’installer le package nuget <code>System.IdentityModel.Tokens.Jwt</code>.\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/bab1879b2fd647caabcab68ccfaa7a27.png\" alt=\"Package nuget JWT\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/bab1879b2fd647caabcab68ccfaa7a27-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bab1879b2fd647caabcab68ccfaa7a27-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bab1879b2fd647caabcab68ccfaa7a27-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/bab1879b2fd647caabcab68ccfaa7a27-lg.png 1024w\"></figure></p><p>Et voici le snippet pour le décoder :</p><pre><code class=\"language-csharp\">var stream = authenticationResult.IdToken;\nvar handler = new JwtSecurityTokenHandler();\nJwtSecurityToken decodedToken = (JwtSecurityToken)handler.ReadToken(stream);\n</code></pre>\n<p>Vous retrouverez toutes les informations dans une collection d’objet <code>Claim</code>, notamment au travers les propriétés <code>Type</code> et <code>Value</code> :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/85c24b29abca478a83d2c41aa5f504b3.png\" alt=\"Structure des données de Claim\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/85c24b29abca478a83d2c41aa5f504b3-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/85c24b29abca478a83d2c41aa5f504b3-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/85c24b29abca478a83d2c41aa5f504b3-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/85c24b29abca478a83d2c41aa5f504b3-lg.png 1024w\"></figure></p><p>Exemple, pour afficher le nom et la ville de l’utilisateur :</p><pre><code class=\"language-csharp\">string name = decodedToken.Claims.FirstOrDefault(c =&gt; c.Type == &quot;name&quot;)?.Value ?? &quot;Noname&quot;;\nstring city = decodedToken.Claims.FirstOrDefault(c =&gt; c.Type == &quot;city&quot;)?.Value ?? &quot;Unknown city&quot;;\n\nUserInfoLabel.Text = $&quot;Welcome {name}, from {city}&quot;;\n</code></pre>\n<p>Le code sera appelé de préférence dans le <code>OnAppearing</code> de la page plutôt que dans son constructeur.</p><p>Et voilà le résultat :\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/1050e4916bdf4788b637930fa9fad470.png\" alt=\"Page de Logout\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/1050e4916bdf4788b637930fa9fad470-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/1050e4916bdf4788b637930fa9fad470-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/1050e4916bdf4788b637930fa9fad470-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/1050e4916bdf4788b637930fa9fad470-lg.png 1024w\"></figure></p><h3 id=\"déconnexion\">Déconnexion</h3>\n<p>La déconnexion consiste principalement à retirer un compte de <code>AuthenticationClient</code> :</p><pre><code class=\"language-csharp\">private async void LogoutButton_Clicked(object sender, EventArgs e)\n{\n    IEnumerable&lt;IAccount&gt; accounts = await App.AuthenticationClient.GetAccountsAsync();\n    while (accounts.Any())\n    {\n        await App.AuthenticationClient.RemoveAsync(accounts.First());\n        accounts = await App.AuthenticationClient.GetAccountsAsync();\n    }\n    \n    await Navigation.PopAsync();\n}\n</code></pre>\n<h3 id=\"la-page-de-signin\">La page de Signin</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/cd085170ebd9443da4c69f613d06d631.png\" alt=\"Page de Signin\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/cd085170ebd9443da4c69f613d06d631-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/cd085170ebd9443da4c69f613d06d631-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/cd085170ebd9443da4c69f613d06d631-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/cd085170ebd9443da4c69f613d06d631-lg.png 1024w\"></figure><h3 id=\"page-de-réinitialisation-de-mot-de-passe\">Page de réinitialisation de mot de passe</h3>\n<figure class=\"post__image\"><img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/42/ff9ca60e682d4f16acd619ee2d0aa7c6.png\" alt=\"Page de réinitialisation de mot de passe\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff9ca60e682d4f16acd619ee2d0aa7c6-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff9ca60e682d4f16acd619ee2d0aa7c6-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff9ca60e682d4f16acd619ee2d0aa7c6-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/42/responsive/ff9ca60e682d4f16acd619ee2d0aa7c6-lg.png 1024w\"></figure>",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "Xamarin.Forms",
                   "Azure",
                   "Active Directory B2C"
            ],
            "date_published": "2021-03-19T18:21:07+01:00",
            "date_modified": "2021-03-23T11:42:14+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/le-xamarin-community-toolkit/",
            "url": "https://www.sylvainmoingeon.fr/le-xamarin-community-toolkit/",
            "title": "Le Xamarin Community Toolkit",
            "summary": "\n  <p>\n    Fruit de la collaboration entre l'équipe Xamarin et la communauté Open Source, le <a href=\"https://github.com/xamarin/XamarinCommunityToolkit\" target=\"_blank\">Xamarin Community Toolkit</a> est à <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a> ce que le sabre laser est au Jedi, c'est-à-dire son indispensable complément.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/41/communitytoolkit.png\" height=\"142\" width=\"300\" alt=\"\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-lg.png 1024w\">\n      \n    </figure>\n\n  <p>\n    Si j'en parle aujourd'hui, c'est parce que le toolkit est désormais disponible dans sa version stable mais aussi parce que c'est lui qui recevra toutes les nouveautés concernant Xamarin.Forms, cette plateforme n'étant plus vouée à évoluer après la version 5.0 et jusqu'à son absorption par <a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/\" target=\"_blank\">dotNet MAUI</a>. Mais voyons cela plus en détails.\n  </p>\n",
            "content_html": "\n  <p>\n    Fruit de la collaboration entre l'équipe Xamarin et la communauté Open Source, le <a href=\"https://github.com/xamarin/XamarinCommunityToolkit\" target=\"_blank\">Xamarin Community Toolkit</a> est à <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a> ce que le sabre laser est au Jedi, c'est-à-dire son indispensable complément.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/41/communitytoolkit.png\" height=\"142\" width=\"300\" alt=\"\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/41/responsive/communitytoolkit-lg.png 1024w\">\n      \n    </figure>\n\n  <p>\n    Si j'en parle aujourd'hui, c'est parce que le toolkit est désormais disponible dans sa version stable mais aussi parce que c'est lui qui recevra toutes les nouveautés concernant Xamarin.Forms, cette plateforme n'étant plus vouée à évoluer après la version 5.0 et jusqu'à son absorption par <a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/\" target=\"_blank\">dotNet MAUI</a>. Mais voyons cela plus en détails.\n  </p>\n\n\n    <h2 id=\"xamarinforms-50\">\n      Xamarin.Forms 5.0\n    </h2>\n\n  <p>\n    <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a> est depuis peu disponible dans sa dernière version, et quand je dis dernière, c'est réellement la dernière. Ensuite, il n'y en aura plus ! Mais n'ayez crainte, il ne s'agit pas d'une disparition mais d'une mutation vers <a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/\" target=\"_blank\">Microsoft MAUI</a>.\n  </p>\n\n  <p>\n    Toujours est-il que dans un soucis de qualité, l'équipe Xamarin a décidé que cette dernière mouture serait avant tout axée sur la stabilité et l'amélioration des performances. Le choix a donc été fait de déplacer dans le Community Toolkit les fonctionnalités de Xamarin.Forms qui étaient restée au stade expérimental (comme les contrôles <a href=\"https://docs.microsoft.com/fr-fr/xamarin/community-toolkit/views/expander\" target=\"_blank\">Expander</a> ou <a href=\"https://docs.microsoft.com/fr-fr/xamarin/community-toolkit/views/mediaelement\" target=\"_blank\">MediaElement</a> par exemple) ou dont le développement n'était pas terminé.\n  </p>\n\n  <p>\n    C'est donc au <a href=\"https://docs.microsoft.com/fr-fr/xamarin/community-toolkit/\" target=\"_blank\">Community Toolkit</a> que revient la charge de toutes les nouveautés de Xamarin.Forms !\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    Vous comprenez donc bien que pour bénéficier des prochaines évolutions de Xamarin.Forms, il faudra vous tourner vers le toolkit !\n  </p>\n\n  <p>\n    Mais ce fameux toolkit, que contient-il donc ?\n  </p>\n\n    <h2 id=\"le-xamarin-community-toolkit\">\n      Le Xamarin Community Toolkit\n    </h2>\n\n  <p>\n    Je ne vais pas vous donner une liste exhaustive du contenu du toolkit, d'abord parce que tout est disponible dans <a href=\"https://docs.microsoft.com/fr-fr/xamarin/community-toolkit/\" target=\"_blank\">sa documentation</a> et surtout il va continuer d'évoluer après l'écriture de cet article. Mais voici ce que vous y trouverez dans les grandes lignes.\n  </p>\n\n    <h3 id=\"behaviors\">\n      Behaviors\n    </h3>\n\n  <p>\n    Fonctionnalité peu connue (ou en tout cas trop peu utilisée) de Xamarin.Forms, les <code>Behaviors</code> sont des bouts de code réutilisables qui ajoutent des comportements à vos composants XAML. Leur puissance est d'être modulable et de permettre d'ajouter ou de modifier des comportements à des contrôles XAML sans en modifier le code ni en créer de nouveaux.\n  </p>\n\n  <p>\n    Par exemple, vous trouverez dans le toolkit un <code>EmailValidationBehavior</code> qui, vous l'aurez compris, ajoute un comportement de validation d'email à vos champs de saisie.\n  </p>\n\n  <p>\n    Dans un autre registre, il y a le toujours très utile&nbsp;<code>EventToCommandBehavior</code> qui permet d'exécuter une commande de votre ViewModel à partir du déclenchement d'un événement du contrôle.\n  </p>\n\n  <p>\n    Bref, les <code>Behaviors</code> sont puissants et très diversifiés, vous en trouverez une grosse douzaine dans le toolkit !\n  </p>\n\n    <h3 id=\"converters\">\n      Converters\n    </h3>\n\n  <p>\n    Les <code>Converters</code> deviennent vite indispensables quand on souhaite suivre proprement l'architecture MVVM. Ils évitent bien des bidouilles inutiles dans vos ViewModels (genre créer artificiellement une propriété qui inverse la valeur booléenne d'une autre, vous voyez ce que je veux dire, hein, inutile de nier !).\n  </p>\n\n  <p>\n    Le plus connu de tous est sans doute le <code>Converter</code> d'inversion de booléen : vous avez une propriété <code>IsBusy</code> dans votre ViewModel et vous voulez rendre un contrôle visible quand sa valeur est <code>false</code>. Vous devez donc lier la propriété <code>IsVisible</code> avec l'inverse de <code>IsBusy</code> ! Vous avez le choix entre <a href=\"https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/\">faire le cradingue</a> et ajouter une nouvelle propriété <code>IsNotBusy</code> dans votre code (non mais quelle horreur) ou faire cela proprement avec un Converter.\n  </p>\n\n  <p>\n    C'est une vingtaine de <code>Converters</code> très utiles qui vous attendent dans le toolkit.\n  </p>\n\n    <h3 id=\"des-tas-de-views-contrles-xaml\">\n      Des tas de Views (contrôles XAML)\n    </h3>\n\n  <p>\n    AvatarView, BadgeView, CameraView, Expander, MediaElement... une douzaine de contrôles XAML prêts à l'emploi qui vous éviteront d'installer de multiples librairies tierces pas toujours maintenus dans le temps et finissent souvent par poser des problèmes de compatibilité. Ici, pas de soucis, c'est maintenu main dans la main par l'équipe Xamarin et la communauté.\n  </p>\n\n    <h3 id=\"et-dautres-choses-encore\">\n      Et d'autres choses encore\n    </h3>\n\n  <p>\n    Des helpers MVVM, des <code>Effects</code> XAML (cousin des <code>Behaviors</code> mais plus light), des extensions, pour en savoir plus, je vous invite à consulter <a href=\"https://docs.microsoft.com/fr-fr/xamarin/community-toolkit/\" target=\"_blank\">la documentation</a> et les quelques ressources que je donne juste après, là, maintenant.\n  </p>\n\n    <h2 id=\"ressources\">\n      Ressources\n    </h2>\n\n  <p>\n    J'ai déjà donné le lien plusieurs fois mais si vous l'avez manqué, dirigez-vous vers la <a href=\"https://docs.microsoft.com/fr-fr/xamarin/community-toolkit/\" target=\"_blank\">documentation officielle du Xamarin Community Toolkit</a>.\n  </p>\n\n  <p>\n    Le dépôt GitHub :&nbsp;<a href=\"https://github.com/xamarin/XamarinCommunityToolkit\" target=\"_blank\">https://github.com/xamarin/XamarinCommunityToolkit</a>\n  </p>\n\n  <p>\n    Le dépôt de l'application d'exemples :&nbsp;<a href=\"https://github.com/xamarin/XamarinCommunityToolkit/tree/main/samples\" target=\"_blank\">https://github.com/xamarin/XamarinCommunityToolkit/tree/main/samples</a>\n  </p>\n\n  <p>\n    L'article de blog de Gerald Versluis :&nbsp;<a href=\"https://devblogs.microsoft.com/xamarin/xamarin-community-toolkit/\" target=\"_blank\">Xamarin Community Toolkit: A Must-Have Xamarin Library</a>\n  </p>\n\n  <p>\n    Les vidéos de présentation par deux stars du monde Xamarin (Gerald Versluis et Javier Suarez)\n  </p>\n\n  <p>\n    <div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/l09fzU0_N04\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></div><br>\n  </p>\n\n  <p>\n    <div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/JmZbfr1590A\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen=\"\"></iframe></div>\n  </p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/41/whatsnewintoolkit.png",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "toolkit",
                   "Xamarin.Forms"
            ],
            "date_published": "2021-01-27T17:58:25+01:00",
            "date_modified": "2021-01-27T17:58:25+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/planet-xamarin/",
            "url": "https://www.sylvainmoingeon.fr/planet-xamarin/",
            "title": "Planet Xamarin",
            "summary": "Chercher des ressources concernant Xamarin.Forms est parfois un parcours du combattant. C'est&hellip;",
            "content_html": "\n  <p>\n    Chercher des ressources concernant Xamarin.Forms est parfois un parcours du combattant. C'est tout éparpillé, il y a du bon, du moins bon, des choses pas franchement à jour.\n  </p>\n\n  <p>\n    Et s'il existait un pays merveilleux dans lequel les meilleurs blogs étaient réunis ?\n  </p>\n\n  <p>\n    Ce pays, ou plutôt cette planète, existe et s'appelle <a href=\"https://www.planetxamarin.com/\" target=\"_blank\">Planet Xamarin</a> !\n  </p>\n\n  <p>\n    Il s'agit d'un agrégateur de blog, s'y abonner, c'est <a href=\"https://www.planetxamarin.com/feed\" target=\"_blank\">s'abonner au gratin international des blogs Xamarin</a> !\n  </p>\n\n  <p>\n    Bon, c'est vrai, j'en fais des caisses, mais c'est aussi parce que depuis peu je fais partie de cette joyeuse communauté. Mon blog est désormais \"Featured by Planet Xamarin\".\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <a href=\"https://www.planetxamarin.com/\" target=\"_blank\">\n        <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/40/planetxamarin-featured-badge-2.png\" height=\"180\" width=\"430\" alt=\"Logo de Planet Xamarin\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/40/responsive/planetxamarin-featured-badge-2-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/40/responsive/planetxamarin-featured-badge-2-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/40/responsive/planetxamarin-featured-badge-2-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/40/responsive/planetxamarin-featured-badge-2-lg.png 1024w\">\n      </a>\n      \n    </figure>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/40/planetxamarin-featured-badge.png",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
            ],
            "date_published": "2021-01-26T17:53:14+01:00",
            "date_modified": "2021-01-26T18:09:54+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/utiliser-des-images-vectorielles-svg-dans-xamarinforms/",
            "url": "https://www.sylvainmoingeon.fr/utiliser-des-images-vectorielles-svg-dans-xamarinforms/",
            "title": "Utiliser des images vectorielles SVG dans Xamarin.Forms",
            "summary": "Il est possible de longue date d'utiliser des bibliothèques tierces telles que&hellip;",
            "content_html": "\n  <p>\n    Il est possible de longue date d'utiliser des bibliothèques tierces telles que <a href=\"https://github.com/mono/SkiaSharp\" target=\"_blank\">Skiasharp</a> pour afficher des images vectorielles dans <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a>.&nbsp;Mais quand on est soucieux de la légèreté et des performances de son application, il est souvent préférable de se limiter aux fonctionnalités proposées par défaut par notre plateforme de développement.\n  </p>\n\n  <p>\n    Depuis l'apparition des <code>Path</code> avec la version 4.8, Xamarin.Forms est en mesure d'utiliser d'afficher des images vectorielles sans l'aide d'aucun autre package !\n  </p>\n\n  <p>\n    Je vous montre comment ça se path... euh... passe ?\n  </p>\n<hr class=\"separator separator--dots\" />\n\n    <h2 id=\"convertir-le-contenu-dun-svg-en-path\">\n      Convertir le contenu d'un SVG en Path\n    </h2>\n\n  <p class=\"msg msg--info\">\n    Les fonctionnalités utilisées dans cet article nécessitent Xamarin.Forms 5.0 ou au minimum Xamarin.Forms 4.8 avec le flag expérimental :&nbsp;<code>Device.SetFlags(new string[] { \"Shapes_Experimental\" });</code> dans le constructeur de la classe <code>App</code>\n  </p>\n\n  <p>\n    Alors oui, je vous ai un tout petit peu menti. On ne peut toujours pas incorporer un fichier svg et l'utiliser comme ressource. Mais un fichier svg n'étant que du texte balisé en XML, il est très facile d'en extraire le contenu et d'en faire une forme dans Xamarin.Form.\n  </p>\n\n  <p>\n    Nous prendrons deux exemples : un cas simple où l'image est constituée d'un seul chemin et un cas plus complexe où l'image est composée de plusieurs chemins.\n  </p>\n\n  <p>\n    Nous verrons ensuite comment rendre une image vectorielle réutilisable facilement dans le code sans duplication à l'aide des <code>Styles</code>.\n  </p>\n\n    <h3 id=\"image-simple-compose-dun-seul-chemin\">\n      Image simple composée d'un seul chemin\n    </h3>\n\n  <p>\n    Nous allons partir de ce svg très simple représentant un avion :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/39/airport.svg\" height=\"64\" width=\"64\" alt=\"Une image vectorielle simple\" >\n      <figcaption>Une image vectorielle simple</figcaption>\n    </figure>\n\n  <p>\n    Si vous ouvrez le fichier avec un éditeur de texte, vous y trouverez ceci :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;svg enable-background=\"new 0 0 64 64\" version=\"1.1\" viewBox=\"0 0 64 64\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n    &lt;path d=\"M15,6.8182L15,8.5l-6.5-1 l-0.3182,4.7727L11,14v1l-3.5-0.6818L4,15v-1l2.8182-1.7273L6.5,7.5L0,8.5V6.8182L6.5,4.5v-3c0,0,0-1.5,1-1.5s1,1.5,1,1.5v2.8182 L15,6.8182z\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n  <p>\n    Ce qui nous intéresse ici, c'est la balise <code>path</code> et en particulier son attribut <code>d</code> contenant le tracé du dessin. Nous allons simplement copier le contenu de <code>d</code> dans la propriété <code>Data</code> d'un <code>Path</code> Xamarin.Forms. Comme ceci :&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Path Aspect=\"Uniform\"\n      Data=\"M15,6.8182L15,8.5l-6.5-1 l-0.3182,4.7727L11,14v1l-3.5-0.6818L4,15v-1l2.8182-1.7273L6.5,7.5L0,8.5V6.8182L6.5,4.5v-3c0,0,0-1.5,1-1.5s1,1.5,1,1.5v2.8182 L15,6.8182z\"\n      Fill=\"Black\"\n      HeightRequest=\"64\"  /&gt;</code></pre>\n\n  <p>\n    La propriété <code>Aspect</code> avec la valeur <code>Uniform</code> conserve les proportions de l'image. La propriété <code>Fill</code> indique la couleur de remplissage de la forme.\n  </p>\n\n  <p>\n    Sans entrer trop loin dans les détails, il est très facile de manipuler l'image, par exemple en modifier le contour, le remplissage ou lui appliquer des transformations.\n  </p>\n\n  <p>\n    La même image vectorielle agrandie x2, pivotée de 45° avec un fond vert et un contour pointillé noir.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Path Aspect=\"Uniform\"\n      Data=\"M15,6.8182L15,8.5l-6.5-1 l-0.3182,4.7727L11,14v1l-3.5-0.6818L4,15v-1l2.8182-1.7273L6.5,7.5L0,8.5V6.8182L6.5,4.5v-3c0,0,0-1.5,1-1.5s1,1.5,1,1.5v2.8182 L15,6.8182z\"            \n      Fill=\"Green\"\n      HeightRequest=\"64\"\n      Rotation=\"45\"\n      Stroke=\"Black\"\n      Scale=\"2\"\n      StrokeDashArray=\"2 1\"\n      StrokeThickness=\"2\" /&gt;</code></pre>\n\n  <p>\n    Le résultat sous Android :<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/39/screenshot-svg-simple-2.png\" height=\"295\" width=\"355\" alt=\"Une image vectorielle, affichée et manipulée dans Xamarin.Forms\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-simple-2-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-simple-2-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-simple-2-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-simple-2-lg.png 1024w\">\n      <figcaption>Une image vectorielle, affichée et manipulée dans Xamarin.Forms</figcaption>\n    </figure>\n\n    <h3 id=\"image-complexe-compose-de-plusieurs-chemins\">\n      Image complexe composée de plusieurs chemins\n    </h3>\n\n  <p>\n    Malheureusement, les images vectorielles ne sont pas toujours aussi simples et sont parfois composées de plusieurs chemins. Par exemple celle-ci :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/39/car.svg\" height=\"512\" width=\"512\" alt=\"\" >\n      \n    </figure>\n<pre class=\"line-numbers  language-html\"><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;svg xmlns=\"http://www.w3.org/2000/svg\" width=\"512\" height=\"512\" viewBox=\"0 0 512 512\"&gt;\n    &lt;path d=\"M104,320a24,24,0,1,0,24,24A24.028,24.028,0,0,0,104,320Zm0,32a8,8,0,1,1,8-8A8.009,8.009,0,0,1,104,352Z\"/&gt;\n    &lt;path d=\"M408,320a24,24,0,1,0,24,24A24.028,24.028,0,0,0,408,320Zm0,32a8,8,0,1,1,8-8A8.009,8.009,0,0,1,408,352Z\"/&gt;\n    &lt;path d=\"M488,304V256a48.051,48.051,0,0,0-48-48H373.54l-22-58.68A43.052,43.052,0,0,0,310.7,120H160a43.044,43.044,0,0,0-40.72,28.97L90.96,208H72a48.051,48.051,0,0,0-48,48v48A16.021,16.021,0,0,0,8,320v16a16.021,16.021,0,0,0,16,16H48.58a55.994,55.994,0,0,0,110.84,0H352.58a55.994,55.994,0,0,0,110.84,0H488a16.021,16.021,0,0,0,16-16V320A16.021,16.021,0,0,0,488,304ZM356.46,208H256V160h82.46ZM40,264H56v8H40Zm8.58,72H24V320H53.41A55.5,55.5,0,0,0,48.58,336ZM104,384a40,40,0,1,1,40-40A40.04,40.04,0,0,1,104,384Zm248.58-48H159.42a55.5,55.5,0,0,0-4.83-16H357.41A55.5,55.5,0,0,0,352.58,336ZM408,384a40,40,0,1,1,40-40A40.04,40.04,0,0,1,408,384Zm40-80a7.337,7.337,0,0,0-.81.05,55.871,55.871,0,0,0-78.37-.01A7.383,7.383,0,0,0,368,304H144a7.383,7.383,0,0,0-.82.04,55.871,55.871,0,0,0-78.37.01A7.337,7.337,0,0,0,64,304H40V288H64a8,8,0,0,0,8-8V256a8,8,0,0,0-8-8H41.01A32.058,32.058,0,0,1,72,224H96a8,8,0,0,0,7.21-4.54l30.71-64a7.5,7.5,0,0,0,.37-.93A27.079,27.079,0,0,1,160,136H310.7a27.027,27.027,0,0,1,19.22,8H160a8,8,0,0,0-8,8v64a8,8,0,0,0,8,8H440a32.058,32.058,0,0,1,30.99,24H448a8,8,0,0,0-8,8v24a8,8,0,0,0,8,8h24v16ZM240,160v48H168V160ZM472,264v8H456v-8Zm16,72H463.42a55.5,55.5,0,0,0-4.83-16H488Z\"/&gt;\n    &lt;path d=\"M256,248h40a8,8,0,0,0,0-16H256a8,8,0,0,0,0,16Z\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n  <p>\n    Malheur ! l'image contient plusieurs chemins mais notre objet <code>Path</code> n'a qu'une seule propriété <code>Data</code> ! Comment faire ?\n  </p>\n\n  <p>\n    Heureusement, la propriété <code>Data</code> de notre <code>Path</code> peut contenir bien plus qu'une simple chaîne de caractère, notamment un groupe de géométrie. Nous allons donc créer un <code>GeometryGroup</code> contenant des <code>PathGeometry</code> dont nous renseigneront la propriété <code>Figures</code>.\n  </p>\n\n  <p>\n    Chaque path de notre svg alimente ainsi les propriétés <code>Figures</code> de nos <code>PathGeometry</code> :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Path Aspect=\"Uniform\"\n      Fill=\"Black\"\n      HeightRequest=\"64\"&gt;\n    &lt;Path.Data&gt;\n        &lt;GeometryGroup&gt;\n            &lt;PathGeometry Figures=\"M104,320a24,24,0,1,0,24,24A24.028,24.028,0,0,0,104,320Zm0,32a8,8,0,1,1,8-8A8.009,8.009,0,0,1,104,352Z\" /&gt;\n            &lt;PathGeometry Figures=\"M408,320a24,24,0,1,0,24,24A24.028,24.028,0,0,0,408,320Zm0,32a8,8,0,1,1,8-8A8.009,8.009,0,0,1,408,352Z\" /&gt;\n            &lt;PathGeometry Figures=\"M488,304V256a48.051,48.051,0,0,0-48-48H373.54l-22-58.68A43.052,43.052,0,0,0,310.7,120H160a43.044,43.044,0,0,0-40.72,28.97L90.96,208H72a48.051,48.051,0,0,0-48,48v48A16.021,16.021,0,0,0,8,320v16a16.021,16.021,0,0,0,16,16H48.58a55.994,55.994,0,0,0,110.84,0H352.58a55.994,55.994,0,0,0,110.84,0H488a16.021,16.021,0,0,0,16-16V320A16.021,16.021,0,0,0,488,304ZM356.46,208H256V160h82.46ZM40,264H56v8H40Zm8.58,72H24V320H53.41A55.5,55.5,0,0,0,48.58,336ZM104,384a40,40,0,1,1,40-40A40.04,40.04,0,0,1,104,384Zm248.58-48H159.42a55.5,55.5,0,0,0-4.83-16H357.41A55.5,55.5,0,0,0,352.58,336ZM408,384a40,40,0,1,1,40-40A40.04,40.04,0,0,1,408,384Zm40-80a7.337,7.337,0,0,0-.81.05,55.871,55.871,0,0,0-78.37-.01A7.383,7.383,0,0,0,368,304H144a7.383,7.383,0,0,0-.82.04,55.871,55.871,0,0,0-78.37.01A7.337,7.337,0,0,0,64,304H40V288H64a8,8,0,0,0,8-8V256a8,8,0,0,0-8-8H41.01A32.058,32.058,0,0,1,72,224H96a8,8,0,0,0,7.21-4.54l30.71-64a7.5,7.5,0,0,0,.37-.93A27.079,27.079,0,0,1,160,136H310.7a27.027,27.027,0,0,1,19.22,8H160a8,8,0,0,0-8,8v64a8,8,0,0,0,8,8H440a32.058,32.058,0,0,1,30.99,24H448a8,8,0,0,0-8,8v24a8,8,0,0,0,8,8h24v16ZM240,160v48H168V160ZM472,264v8H456v-8Zm16,72H463.42a55.5,55.5,0,0,0-4.83-16H488Z\" /&gt;\n            &lt;PathGeometry Figures=\"M256,248h40a8,8,0,0,0,0-16H256a8,8,0,0,0,0,16Z\" /&gt;\n        &lt;/GeometryGroup&gt;\n    &lt;/Path.Data&gt;\n&lt;/Path&gt;\n</code></pre>\n\n  <p>\n    Et hop :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/39/screenshot-svg-complexe.png\" height=\"132\" width=\"353\" alt=\"\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-complexe-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-complexe-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-complexe-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-complexe-lg.png 1024w\">\n      \n    </figure>\n\n  <p>\n    Nous voilà capable d'afficher des images vectorielles simples ou complexes directement dans Xamarin.Forms. Mais pour l'instant, cela reste fastidieux : pour utiliser une même image à plusieurs endroits, il reste nécessaire de copier-coller tout le contenu du <code>Path</code> à chaque fois.&nbsp;\n  </p>\n\n  <p id=\"voyons-comment-rsoudre-ce-problme-avec-style-\">\n    Voyons comment résoudre ce problème avec Style !\n  </p>\n\n    <h2 id=\"crer-une-image-vectorielle-rutilisable-grce-aux-styles\">\n      Créer une image vectorielle réutilisable grâce aux styles\n    </h2>\n\n  <p>\n    Nous allons créer un&nbsp;<code>ResourceDictionary</code> pour y placer des <code>Styles</code> définissant le tracé de chaque image vectorielle.<resourcedictionary <br=\"\"></resourcedictionary>\n  </p>\n\n  <p>\n    Toutes nos images SVG auront des propriétés communes, nous allons donc commencer par créer un style de base :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Style x:Key=\"BaseSVGStyle\" TargetType=\"Path\"&gt;\n    &lt;Setter Property=\"Aspect\" Value=\"Uniform\" /&gt;\n    &lt;Setter Property=\"Fill\" Value=\"Black\" /&gt;\n&lt;/Style&gt;</code></pre>\n\n  <p>\n    Nous allons ensuite créer un style par image héritant de <code>BaseSVGStyle</code>&nbsp;à l'aide de la propriété <code>BasedOn</code>. Voici un exemple :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Style x:Key=\"PlaneSVG\"\n        BasedOn=\"{StaticResource BaseSVGStyle}\"\n        TargetType=\"Path\"&gt;\n    &lt;Setter Property=\"Data\" Value=\"m430.37 48.711c29.15-29.153-11.17-67.267-39.96-38.479l-106.3 106.3-243.52-64.372-40.59 40.595 200.71 105.71-81.18 81.17-63.104-7.75-32.106 32.11 71.595 37.64 37.645 71.6 32.1-32.11-7.38-62.74 81.18-81.17 103.43 199.39 40.6-40.6-61.63-238.58 108.51-108.71z\" /&gt;\n    &lt;Setter Property=\"HeightRequest\" Value=\"64\" /&gt;\n&lt;/Style&gt;\n    \n&lt;Style x:Key=\"CarSVG\"\n        BasedOn=\"{StaticResource BaseSVGStyle}\"\n        TargetType=\"Path\"&gt;\n    &lt;Setter Property=\"HeightRequest\" Value=\"32\" /&gt;\n    &lt;Setter Property=\"Data\"&gt;\n        &lt;Setter.Value&gt;\n            &lt;GeometryGroup&gt;\n                &lt;PathGeometry Figures=\"M104,320a24,24,0,1,0,24,24A24.028,24.028,0,0,0,104,320Zm0,32a8,8,0,1,1,8-8A8.009,8.009,0,0,1,104,352Z\" /&gt;\n                &lt;PathGeometry Figures=\"M408,320a24,24,0,1,0,24,24A24.028,24.028,0,0,0,408,320Zm0,32a8,8,0,1,1,8-8A8.009,8.009,0,0,1,408,352Z\" /&gt;\n                &lt;PathGeometry Figures=\"M488,304V256a48.051,48.051,0,0,0-48-48H373.54l-22-58.68A43.052,43.052,0,0,0,310.7,120H160a43.044,43.044,0,0,0-40.72,28.97L90.96,208H72a48.051,48.051,0,0,0-48,48v48A16.021,16.021,0,0,0,8,320v16a16.021,16.021,0,0,0,16,16H48.58a55.994,55.994,0,0,0,110.84,0H352.58a55.994,55.994,0,0,0,110.84,0H488a16.021,16.021,0,0,0,16-16V320A16.021,16.021,0,0,0,488,304ZM356.46,208H256V160h82.46ZM40,264H56v8H40Zm8.58,72H24V320H53.41A55.5,55.5,0,0,0,48.58,336ZM104,384a40,40,0,1,1,40-40A40.04,40.04,0,0,1,104,384Zm248.58-48H159.42a55.5,55.5,0,0,0-4.83-16H357.41A55.5,55.5,0,0,0,352.58,336ZM408,384a40,40,0,1,1,40-40A40.04,40.04,0,0,1,408,384Zm40-80a7.337,7.337,0,0,0-.81.05,55.871,55.871,0,0,0-78.37-.01A7.383,7.383,0,0,0,368,304H144a7.383,7.383,0,0,0-.82.04,55.871,55.871,0,0,0-78.37.01A7.337,7.337,0,0,0,64,304H40V288H64a8,8,0,0,0,8-8V256a8,8,0,0,0-8-8H41.01A32.058,32.058,0,0,1,72,224H96a8,8,0,0,0,7.21-4.54l30.71-64a7.5,7.5,0,0,0,.37-.93A27.079,27.079,0,0,1,160,136H310.7a27.027,27.027,0,0,1,19.22,8H160a8,8,0,0,0-8,8v64a8,8,0,0,0,8,8H440a32.058,32.058,0,0,1,30.99,24H448a8,8,0,0,0-8,8v24a8,8,0,0,0,8,8h24v16ZM240,160v48H168V160ZM472,264v8H456v-8Zm16,72H463.42a55.5,55.5,0,0,0-4.83-16H488Z\" /&gt;\n                &lt;PathGeometry Figures=\"M256,248h40a8,8,0,0,0,0-16H256a8,8,0,0,0,0,16Z\" /&gt;\n            &lt;/GeometryGroup&gt;\n        &lt;/Setter.Value&gt;\n    &lt;/Setter&gt;\n&lt;/Style&gt;</code></pre>\n\n  <p>\n    Les styles consistent donc principalement à définir la valeur de la propriété <code>Data</code> de nos <code>Path</code>.\n  </p>\n\n  <p>\n    Pour les utiliser dans nos <code>Views</code>, nous devons d'abord déclarer le dictionnaire de ressource. Soit dans les ressources de la page, soit dans <code>App.xaml</code> si l'on souhaite accéder aux images partout dans le projet (<em>PathesStyles</em> est le nom de mon dictionnaire de ressource).\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;ContentPage.Resources&gt;\n    &lt;ResourceDictionary&gt;\n        &lt;ResourceDictionary.MergedDictionaries&gt;\n            &lt;pathes:PathesStyles /&gt;\n        &lt;/ResourceDictionary.MergedDictionaries&gt;\n    &lt;/ResourceDictionary&gt;\n&lt;/ContentPage.Resources&gt;</code></pre>\n\n  <p>\n    Ensuite, dans la contenu de la page, c'est simple comme <i>Bonjour</i>&nbsp;, on applique le style souhaité à notre path :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Path Style=\"{StaticResource CarSVG}\" /&gt;</code></pre>\n\n  <p>\n    Il est toujours possible, bien entendu, de surcharger les valeurs proposées par le style. Pour afficher l'image en rouge par exemple :&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Path Style=\"{StaticResource CarSVG}\" Fill=\"Red\" /&gt;</code></pre>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/39/screenshot-svg.png\" height=\"1250\" width=\"608\" alt=\"Un florilège d'images vectorielles dans Xamarin.Forms\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/39/responsive/screenshot-svg-lg.png 1024w\">\n      <figcaption>Un florilège d'images vectorielles dans Xamarin.Forms</figcaption>\n    </figure>\n\n  <p>\n    Pour la démo, les valeurs sont en dur dans le code, mais bien entendu toutes les propriétés sont <code>Bindables</code> pour en modifier les valeurs à l'exécution. Votre créativité fera le reste !\n  </p>\n\n    <h2 id=\"projet-github\">\n      Projet GitHub\n    </h2>\n\n  <p>\n    Retrouvez la <a href=\"https://github.com/SylvainMoingeon/SVGDemo\" target=\"_blank\">démonstration de l'utilisation des Path Xamarin.Forms pour afficher des images vectorielles</a> dans mon dépôt GitHub.\n  </p>\n\n  <p>\n    Pensez bien à liker et partager pour que ce soit utile au plus grand nombre !\n  </p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/39/cover_svg.png",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "svg",
                   "Xamarin.Forms",
                   "XAML"
            ],
            "date_published": "2020-11-17T15:55:28+01:00",
            "date_modified": "2020-11-18T11:51:12+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-2/",
            "url": "https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-2/",
            "title": "Créer un contrôle réutilisable 100% Xamarin.Forms, partie 2",
            "summary": "Vous apprendrez notamment à créer des propriétés bindables (BindableProperty) et à utiliser&hellip;",
            "content_html": "\n  <p>\n    \n  </p>\n\n  <p>\n    Vous apprendrez notamment à créer des propriétés bindables (<code><a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/xaml/bindable-properties\" target=\"_blank\">BindableProperty</a></code>) et à utiliser les <code><a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/data-binding/converters\" target=\"_blank\" class=\"\" data-link-popup-id=\"1604422655301\">Converters</a></code>.&nbsp;\n  </p>\n\n  <p>\n    Si ce n'est pas déjà fait, je vous invite à d'abord consulter la <a href=\"https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-1/\">première partie de cette article</a>&nbsp;dans laquelle nous avons construit les bases d'une image circulaires avec quelques options (placeholder, bordure...).\n  </p>\n<hr class=\"separator separator--dots\" />\n\n    <h2 id=\"mais-o-vaton-\">\n      Mais où va-t-on ?\n    </h2>\n\n  <p>\n    Commençons par un petit rappel, voici une démonstration animée de l'image circulaire en situation.\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    Comme je suis un gars vraiment sympa, pour le même prix je vous ajoute une copie d'écran iOS. La base de code est 100% commune, <strong>un seul code pour générer deux applications natives</strong>. C'est la beauté de Xamarin.Forms.\n  </p>\n\n  <p>\n    &nbsp;On y voit :&nbsp;\n  </p>\n\n  <ul>\n    <li>Des images circulaires</li><li>Une bordure s'afficher si le contact est placé dans les favoris</li><li>Un indicateur de chargement tourbillonner brièvement sur les deux dernières images</li><li>Des images de substitution par défaut s'il n'existe pas d'image valide (image non renseignée, url invalide ou inaccessible...)</li>\n  </ul>\n\n  <div  class=\"gallery-wrapper\">\n    <div class=\"gallery\" data-columns=\"3\">\n      <figure class=\"gallery__item\">\n      <a href=\"https://www.sylvainmoingeon.fr/media/posts/37/gallery/demo-circleimage.gif\" data-size=\"350x726\">\n        <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/gallery/demo-circleimage.gif\" height=\"726\" width=\"350\" alt=\"Screenshot animé sous Android\" >\n      </a>\n      <figcaption>L'image circulaire en situation sous Android</figcaption>\n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://www.sylvainmoingeon.fr/media/posts/37/gallery/circleimage-ios-screenshot.png\" data-size=\"1125x2436\">\n        <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/gallery/circleimage-ios-screenshot-thumbnail.png\" height=\"1663\" width=\"768\" alt=\"Screenshot sous iOS\" >\n      </a>\n      <figcaption>Copie d'écran sous iOS</figcaption>\n    </figure>\n    </div>\n  </div>\n\n  <p>\n    La mise-en-page est très simple, un titre, un sous-titre indiquant le nombre de favoris et une liste de contacts.\n  </p>\n\n  <p>\n    Par contre, hors de question de reprendre tel quel le XAML de l'image circulaire créée dans l'article précédent et de le coller comme ça, l'air de rien. Hé ! Oh ! On est des vrais professionnels n'est-ce pas ? Nous allons donc en faire un contrôle découplé du reste du code et réutilisable au besoin partout dans le projet.\n  </p>\n\n    <h2 id=\"cration-du-contrle\">\n      Création du contrôle\n    </h2>\n\n    <h3 id=\"composons\">\n      Composons\n    </h3>\n\n  <p>\n    Souvenez-vous, dans la première partie de l'article nous avions créé une <a href=\"https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-1/\">image circulaire</a> à l'aide de la propriété <code>Clip</code> et d'une <code>EllipseGemotry</code>. Puis nous l'avions agrémentée de quelques options en y superposant d'autres contrôles dans une <code>Grid</code>.\n  </p>\n\n  <p>\n    Nous avons donc une base avec une image circulaire simple :&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Image Source=\"monimage.png\" WidthRequest=\"128\" HeightRequest=\"128\"&gt;\n    &lt;Image.Clip&gt;\n        &lt;EllipseGeometry RadiusX=\"64\"\n                         RadiusY=\"64\"\n                         Center=\"64,64\" /&gt;\n    &lt;/Image.Clip&gt;\n&lt;/Image&gt;</code></pre>\n\n  <p>\n    Et une image circulaire avancée, composée à partir de la précédente :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Grid&gt;\n    &lt;Image Source=\"monPlaceholder.png\" WidthRequest=\"128\" HeightRequest=\"128\"&gt;\n        &lt;Image.Clip&gt;\n            &lt;EllipseGeometry RadiusX=\"64\"\n                         RadiusY=\"64\"\n                         Center=\"64,64\" /&gt;\n        &lt;/Image.Clip&gt;\n    &lt;/Image&gt;\n\n    &lt;Image Source=\"monimage.png\" WidthRequest=\"128\" HeightRequest=\"128\"&gt;\n        &lt;Image.Clip&gt;\n            &lt;EllipseGeometry RadiusX=\"64\"\n                         RadiusY=\"64\"\n                         Center=\"64,64\" /&gt;\n        &lt;/Image.Clip&gt;\n    &lt;/Image&gt;\n\n    &lt;Ellipse Margin=\"0\"\n             HorizontalOptions=\"Center\"\n             VerticalOptions=\"Center\"\n             Stroke=\"Yellow\"\n             StrokeThickness=\"2\"\n             HeightRequest=\"128\"\n             WidthRequest=\"128\"\n             /&gt;\n\n     &lt;ActivityIndicator IsRunning=\"{Binding Source={x:Reference monImage}, Path=IsLoading}\"\n                        VerticalOptions=\"Center\"\n                        HorizontalOptions=\"Center\"\n                        /&gt;\n&lt;/Grid&gt;</code></pre>\n\n  <p>\n    Nous avons le squelette de notre contrôle mais quelque chose me chiffonne. Ce n'est tout de même pas bien beau cette duplication de code. Et si, au lieu de copier-coller le code de l'image \"clippée\" avec l'ellipse, on en faisait un contrôle d'image circulaire tout simple mais réutilisable ?\n  </p>\n\n  <p>\n    Notre image étant inscrite dans un cercle, cela me gêne de définir <code>HeightRequest</code> et <code>WidthRequest</code>. Les deux propriétés auront toujours la même valeur, autant définir une nouvelle propriété <code>ImageSize</code>.\n  </p>\n\n  <p>\n    Quelque chose comme ça :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Grid&gt;\n    &lt;local:CircleImage x:Name=\"monPlaceholder\"\n                         Source=\"monPlaceholder.png\"\n                         ImageSize=\"128\" /&gt;\n                         \n    &lt;local:CircleImage x:Name=\"monImage\"\n                         Source=\"monImage.png\"\n                         ImageSize=\"128\" /&gt;\n\n    [...] Le reste du contrôle avec la bordure et l'activityIndicator\n&lt;/Grid&gt;</code></pre>\n\n  <p>\n    Nous allons donc commencer par créer un contrôle <code>CircleImage</code> qui hérite du contrôle Image de base, en y ajoutant une propriété <code>ImageSize</code> et un \"clipping\" circulaire.\n  </p>\n\n  <p>\n    Et comme affecter des valeurs en dur ça n'a pas beaucoup d'intérêt dans un vrai projet, nous rendrons la propriété <code>ImageSize</code> bindable de façon à pouvoir écrire quelque chose comme :\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>&lt;local:CircleImage x:Name=\"monPlaceholder\"\n                     Source=\"{Binding MonImage}\"\n                     ImageSize=\"{Binding MyImageSize}\" /&gt;</code></pre>\n\n  <p>\n    La propriété <code>Source</code> héritant du contrôle Image de base, elle est déjà bindable.\n  </p>\n\n  <p>\n    Si ceci vous parait obscur, relisez mon article sur l'<a href=\"https://www.sylvainmoingeon.fr/xamarinforms-a-quoi-ca-sert-mvvm/\">architecture MVVM</a> !\n  </p>\n\n    <h3 id=\"crer-un-nouveau-contrle\">\n      Créer un nouveau contrôle\n    </h3>\n\n  <p>\n    Pour faire les choses proprement, créez un dossier <i>CircleImage</i> à la base de votre projet Xamarin.Forms et ajoutez-y un <code>ContentView</code> nommé CircleImage. Il n'y a pas de mal à être pragmatique sur le nommage. 😁\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/add-content-view.png\" height=\"778\" width=\"956\" alt=\"Copie d'écran pour illustrer l'ajout d'un ContentView dans Xamarin.Forms\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/37/responsive/add-content-view-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/add-content-view-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/add-content-view-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/add-content-view-lg.png 1024w\">\n      <figcaption>Ajoutez un ContentView nommé CircleImage</figcaption>\n    </figure>\n\n  <p>\n    Par défaut, votre <code>ContentView</code> est de type... <code>ContentView</code>. Ça va de soi mais je le précise pour les deux qui dorment au fond vers le radiateur.\n  </p>\n\n  <p>\n    Nous pourrions ajouter notre <code>Image</code> comme contenu du <code>ContentView</code>, mais pourquoi alourdir le code et l'affichage natif en imbriquant des contrôles alors que nous avons uniquement besoin d'une image ? Nous allons donc remplacer le type <code>ContentView</code> par le type <code>Image</code>.\n  </p>\n\n  <p>\n    Attention ! Pensez bien à le faire à la fois dans le XAML...<br>\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>&lt;!-- Remplacer --&gt;\n&lt;ContentView x:Class=\"CircleImageDemo.CircleImage.CircleImage\"\n&lt;-- Par --&gt;\n&lt;Image x:Class=\"CircleImageDemo.CircleImage.CircleImage\"</code></pre>\n\n  <p>\n    ...et dans le code-behind C# !\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>// Remplacer\npublic partial class CircleImage : ContentView { }\n// Par\npublic partial class CircleImage : Image { }</code></pre>\n\n  <p>\n    Nous avons presque tout ce qu'il nous faut, il s'agit juste de créer le découpage circulaire dans le XAML et d'ajouter la propriété bindable&nbsp;<code>ImageSize</code>. Commençons par ceci.\n  </p>\n\n    <h3 id=\"exposer-des-proprits-bindables-depuis-lextrieur\">\n      Exposer des propriétés bindables depuis l'extérieur\n    </h3>\n\n  <p>\n    Je suis en train de créer un contrôle visuel et je souhaite exposer une propriété qui soit bindable depuis et/ou vers l'extérieur.&nbsp;Il s'agit principalement de définir une propriété qui encapsule une <code>BindableProperty</code> au lieu d'un champs privé comme cela se fait habituellement.\n  </p>\n\n  <p>\n    Je vous vois froncer les sourcils, alors un exemple :&nbsp;\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>#region ImageSize Bindable property\n// Bindable property\npublic static readonly BindableProperty ImageSizeProperty =\n  BindableProperty.Create(\n     propertyName: nameof(ImageSize),\n     declaringType: typeof(CircleImage),\n     returnType: typeof(double),\n     defaultValue: 0.0,\n     defaultBindingMode: BindingMode.OneWay,\n     propertyChanged: (bindable, oldValue, newValue) =&gt;\n     { });\n\n// Gets or sets value of this BindableProperty\npublic double ImageSize\n{\n    get =&gt; (double)GetValue(ImageSizeProperty);\n    set =&gt; SetValue(ImageSizeProperty, value);\n}\n#endregion\n</code></pre>\n\n  <p>\n    Nous avons la propriété <code>ImageSize</code> qui sera exposée et sur laquelle on viendra \"binder\" dans le XAML.\n  </p>\n\n  <p>\n    La gestion du binding proprement dit est laissée à la <code>BindableProperty</code> <code>ImageSizeProperty</code>&nbsp;instanciée par la méthode statique&nbsp; <code>BindableProperty.Create</code> avec les arguments suivants :&nbsp;\n  </p>\n\n  <ul>\n    <li><b>propertyName</b> : nom de la propriété exposée, celle qui recevra les valeurs via Binding</li><li><b>declaringType</b> : type de la classe portant la propriété, ici CircleImage</li><li><b>returnType</b> : type retourné par la propriété</li><li>defaultValue : valeur par défaut</li><li>defaultBindingMode : définit le sens du binding par défaut</li><li>coerceValue : permet de réévaluer la valeur d'une BindableProperty quand la valeur d'une autre BindableProperty change. Pas évident de l'expliquer en une seule phrase, je vous recommande de <a href=\"https://docs.microsoft.com/fr-fr/xamarin/xamarin-forms/xaml/bindable-properties#coerce-value-callbacks\" target=\"_blank\">lire la documentation</a> !</li><li>propertyChanged : callback appelé quand la valeur du binding vient de changer</li><li>propertyChanging : idem quand la valeur est en train de changer</li><li>defaultValueCreator : permet de définir une valeur par défaut à partir d'une <code>Func</code>&nbsp;<br></li>\n  </ul>\n\n  <p>\n    Seuls les trois premiers arguments sont obligatoires.\n  </p>\n\n  <p>\n    Tout ceci se place bien entendu dans le code-behind de la <code>View</code>.\n  </p>\n\n  <p>\n    Nous avons désormais une propriété <code>ImageSize</code> mais comment allons-nous l'utiliser en interne dans notre <code>CircleImage</code> ?\n  </p>\n\n  <p>\n    Il y a plusieurs façons de voir les choses. Dans des cas simples qui touchent directement l'aspect visuel, on peut le faire directement dans le XAML. Parfois, c'est plus pertinent d'agir via les callbacks&nbsp;<code>propertyChanged</code> ou&nbsp;<code>propertyChanging</code> de la BindableProperty qui offrent plus de souplesse et de liberté que XAML.\n  </p>\n\n  <p>\n    Je vais vous présenter les deux mais, bien entendu, dans le <a href=\"https://github.com/SylvainMoingeon/CircleImageDemo\" target=\"_blank\">projet GitHub</a> je n'ai pu en laisser qu'un !\n  </p>\n\n    <h3 id=\"lier-les-proprits-bindables-au-xaml-du-contrle\">\n      Lier les propriétés bindables au XAML du contrôle\n    </h3>\n\n  <p>\n    Partons de notre <code>CircleImage</code> de base.&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;Image x:Class=\"CircleImageDemo.CircleImage.CircleImage\"\n       xmlns=\"http://xamarin.com/schemas/2014/forms\"\n       xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n       HeightRequest=\"128\"\n       WidthRequest=\"128\"&gt;\n    &lt;Image.Clip&gt;\n        &lt;EllipseGeometry RadiusX=\"64\"\n                         RadiusY=\"64\"\n                         Center=\"64,64\"\n                         /&gt;\n    &lt;/Image.Clip&gt;\n&lt;/Image&gt;</code></pre>\n\n  <p>\n    L'enjeu est de réussir à lier la propriété <code>ImageSize</code> aux propriétés&nbsp;<code>HeightRequest</code> et&nbsp;<code>WidthRequest</code> de l'image, ainsi qu'aux&nbsp;<code>RadiusX</code>,&nbsp;<code>RadiusY</code> et <code>Center</code> de l'ellipse dont les valeurs sont la moitié de&nbsp;<code>ImageSize</code>.\n  </p>\n\n  <p>\n    Pour cela, nous allons utiliser un Binding. Cela peut paraître un peu confus, il faut suivre un peu : on va binder en interne une valeur qui provient d'un Binding externe. Une fois qu'on a compris ça, on a tout compris.\n  </p>\n\n  <p>\n    Sauf que là, comme ça, ça ne fonctionnera pas. Il est nécessaire de préciser à notre <code>View</code> que son contexte de binding est... elle-même !\n  </p>\n\n  <p>\n    Une méthode simple est de donner un nom à notre contrôle, \"this\" par exemple pour mimer le mot clé \"this\" du C# et de donner \"this\" comme source du contexte de binding :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Image x:Name=\"this\" BindingContext=\"{x:Reference this}\" ...&gt;\n</code></pre>\n\n  <p>\n    On peut désormais binder <code>ImageSize</code> aux propriétés de l'<code>Image</code> :<br><br>\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;Image x:Name=\"this\"\n       [...]\n       BindingContext=\"{x:Reference this}\"\n       HeightRequest=\"{Binding ImageSize}\"\n       WidthRequest=\"{Binding ImageSize}\"\n       &gt;\n    [...]\n&lt;/Image&gt;</code></pre>\n\n  <p>\n    Ça y est, nous avons une image carrée de côté <code>ImageSize</code>.&nbsp;\n  </p>\n\n  <p>\n    Vous la voulez circulaire ? Fastoche, il suffirait de binder&nbsp;(ImageSize / 2) sur les propriétés de l'ellipse... si seulement c'était possible !\n  </p>\n\n  <p>\n    Il nous faut trouver un moyen de modifier la valeur du binding à la volée... Ça tombe bien, Xamarin.Forms nous propose un outil pour cela : le <code>Converter</code>.\n  </p>\n\n  <p>\n    Je n'entre pas dans les détails car j'ai un article en cours de rédaction sur le sujet, sachez simplement que le principe est simple : il s'agit d'une classe implémentant l'interface <code>IValueConverter</code>, dont la principale méthode reçoit une valeur en entrée et en retourne une autre en sortie. Exactement ce qu'il nous faut. Nous allons créer un <code>DividerConverter</code> !\n  </p>\n\n  <p>\n    Pour rendre le converter plus versatile, celui-ci expose une propriété <code>Divider</code> définissant la quantité par laquelle nous souhaitons diviser. Nous aurions pu simplement diviser par deux, en dur dans le code, mais ça limiterait la réutilisation du converter.\n  </p>\n\n  <p>\n    La méthode <code>Convert()</code> divise la valeur reçue de l'extérieur, la méthode <code>ConvertBack()</code> fait l'inverse dans le cas d'un binding à double sens (si on modifie la valeur au niveau de l'interface utilisateur, elle sera répercutée dans le code, mais bien entendue avec l'opération arithmétique inverse !)\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public class DoubleDividerConverter : IValueConverter\n{      \n    public int Divider { get; set; } = 1;\n\n    // Divise la valeur reçue par Divider\n    public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        if (value is double doubleToDivide)\n        {\n            return doubleToDivide / Divider;\n        }\n\n        throw new ArgumentException($\"{nameof(value)} should be of type double\");\n    }\n\n    // Multiplie la valeur renvoyée par Divider\n    public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n    {\n        if (value is double doubleToMultiply)\n        {\n            return doubleToMultiply * Divider;\n        }\n\n        throw new ArgumentException($\"{nameof(value)} should be of type double\");\n    }\n}\n</code></pre>\n\n  <p>\n    Reste à utiliser le Converter dans le XAML :\n  </p>\n\n  <ul>\n    <li>Le déclarer comme ressource statique dans la <code>View</code></li><li>L'ajouter aux Bindings</li><li>Préciser à l'<code>EllipseGeometry</code> son contexte de Binding.</li>\n  </ul>\n<pre class=\"line-numbers  language-csharp\"><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;\n&lt;Image x:Name=\"this\"\n         [...]\n       &gt;\n    &lt;Image.Resources&gt;\n        &lt;ResourceDictionary&gt;\n            &lt;local:DoubleDividerConverter \n                    x:Key=\"DoubleDividerConverter\" \n                    Divider=\"2\" /&gt;\n        &lt;/ResourceDictionary&gt;\n    &lt;/Image.Resources&gt;\n\n    &lt;Image.Clip&gt;\n        &lt;EllipseGeometry BindingContext=\"{x:Reference this}\"\n                         RadiusX=\"{Binding ImageSize, Converter={StaticResource DoubleDividerConverter}}\"\n                         RadiusY=\"{Binding ImageSize, Converter={StaticResource DoubleDividerConverter}}\"\n                         Center=\"??? Center attend un type Point, je vous laisse réfléchir quelques instants\"\n                         /&gt;\n    &lt;/Image.Clip&gt;\n&lt;/Image&gt;</code></pre>\n\n  <p>\n    C'est bon pour la forme de l'ellipse, nous venons d'en faire un cercle de rayon (Imagesize / 2).\n  </p>\n\n  <p>\n    Reste à la positionner via la propriété <code>Center</code>. Celle-ci attend une valeur de type <code>Point</code>. Nous allons là encore utiliser un converter. Il recevra la taille de l'image en entrée et retournera un point dont les coordonnées sont au centre de l'image.\n  </p>\n\n  <p>\n    Vous trouverez tout le code dans le <a href=\"https://github.com/SylvainMoingeon/CircleImageDemo\" target=\"_blank\">dépôt GitHub</a>.&nbsp;\n  </p>\n\n    <h3 id=\"grer-la-proprit-bindable-dans-le-code-behind\">\n      Gérer la propriété bindable dans le code behind\n    </h3>\n\n  <p>\n    Si la beauté du XAML vous laisse de marbre, il est possible d'effectuer la même chose directement dans le code-behind de la View.\n  </p>\n\n  <p>\n    Il suffit de placer notre code dans l'événement <code>propertyChanged</code> de la <code>BindableProperty</code>&nbsp;: nous y définirons le rayon du cercle, la taille de l'image et nous appliquerons l'ellipse à l'image après avoir créé celle-ci.\n  </p>\n\n  <p>\n    Et c'est tout !\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public static readonly BindableProperty ImageSizeProperty =\n  BindableProperty.Create(\n     propertyName: nameof(ImageSize),\n     declaringType: typeof(CircleImage),\n     returnType: typeof(double),\n     defaultValue: 0.0,\n     defaultBindingMode: BindingMode.OneWay,\n     propertyChanged: (bindable, oldValue, newValue) =&gt;\n     {\n         if (bindable is CircleImage circleImage && newValue is double imageSize)\n         {\n             double radius = imageSize / 2;\n             EllipseGeometry ellipseGeometry = new EllipseGeometry()\n             {\n                 Center = new Point(radius, radius),\n                 RadiusX = radius,\n                 RadiusY = radius\n             };\n\n             circleImage.HeightRequest = imageSize;\n             circleImage.WidthRequest = imageSize;\n             circleImage.Clip = ellipseGeometry;\n         }\n     });\n</code></pre>\n\n  <p>\n    Vous allez me dire, ça valait bien la peine de s'embêter en XAML avec des converters ! Ce n'est pas complètement faux. Mais pas totalement vrai.\n  </p>\n\n  <p>\n    La qualité d'un code ne se limite pas à sa simplicité mais aussi à sa clarté. Ici, un développeur ne connaissant pas le code devra chercher à l'aveuglette dans le code-behind pour comprendre comment l'image est dimensionnée et devient circulaire. Tant que ça reste simple, ça passe. Dans un code plus touffu, cela peut vite devenir un véritable casse-tête !\n  </p>\n\n  <p>\n    Il y a également un risque accru de <a href=\"https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/\">monstre spaghetti et de crotte de nez dans le code</a>. Un développeur débutant ou peu consciencieux, aura vite fait de mélanger tout et n'importe quoi dans <code>propertyChanged</code>. Au minimum, il aurait fallu que j'extrais le code dans une méthode à part. Et pour être parfaitement propre, séparer le dimensionnement de l'image du découpage circulaire dans deux méthodes distinctes. Et tant qu'on y est, placer la conversion entre la taille de l'image et l'ellipse dans une classe à part pour que ce soit réutilisable. Une sorte de <code>Converter</code> qui cacherait son nom, en quelque sorte... Bref, le code-behind est plus simple surtout parce qu'on peut librement y coder comme un sale.\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    L'avantage de la méthode \"XAML\", c'est que 100% du code concernant l'aspect visuel est au même endroit, directement là où on irait le chercher spontanément. Tout y est explicite, on sait d'emblée où chercher l'information. Et ça, en débogage, ça n'a pas de prix !\n  </p>\n\n    <h2 id=\"appliquons-le-mme-principe-pour-crer-un-contrle-avanc\">\n      Appliquons le même principe pour créer un contrôle avancé\n    </h2>\n\n  <p>\n    Nous avons désormais une image circulaire simple et réutilisable. Nous allons de même créer une image circulaire encapsulant la précédente pour lui ajouter quelques options.\n  </p>\n\n  <p>\n    Pour commencer, nous allons créer comme précédemment un <code>ContentView</code> que nous nommerons <code>AdvancedCircleImage</code> et qui héritera de <code>Grid</code> puisque c'est le <code>Layout</code> de base de notre contrôle.\n  </p>\n\n  <p>\n    Je vous laisse faire, c'est exactement comme tout à l'heure, avec une <code>Grid</code> à la place de l'<code>Image</code>.\n  </p>\n\n  <p>\n    A l'intérieur de notre Grid, nous aurons donc :&nbsp;\n  </p>\n\n  <ul>\n    <li>Deux itérations de notre <code>CircleImage</code>, l'une pour l'image, l'autre pour l'image de substitution</li><li>Une <code>Ellipse</code> pour la bordure</li><li>Un <code>ActivityIndicator</code> pour l'indicateur de chargement</li>\n  </ul>\n\n  <p>\n    Dans le code-behind, nous définirons quelques <code>BindablePropertie</code> :\n  </p>\n\n  <ul>\n    <li>MainImageSource : source de l'image principale</li><li>PlaceholderImageSource : source du placeholder</li><li>ImageSize : taille de l'image</li><li>IsBorderVisible : la bordure est-elle visible ?</li><li>BorderColor : couleur de la bordure</li><li>BorderThickness : épaisseur de la bordure</li><li>IsLoaderEnabled : l'indicateur de chargement est-il actif (si faux on ne le verra jamais, si vrai on le verra quand l'image est en train de charger)<br></li>\n  </ul>\n\n  <p>\n    Nous allons appliquer la même recette que précédemment, voici une version simplifiée du XAML de laquelle j'ai retiré ce qui n'est pas nécessaire à la compréhension :\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>&lt;Grid x:Name=\"this\"&gt;\n    &lt;Grid.Resources&gt;\n        &lt;DoubleDividerConverter x:Key=\"DoubleDividerConverter\" Divider=\"2\" /&gt;\n        &lt;ImageSizeToCenterConverter x:Key=\"ImageSizeToCenterConverter\" /&gt;\n        &lt;ColorToBrushConverter x:Key=\"ColorToBrushConverter\" /&gt;\n    &lt;/Grid.Resources&gt;\n\n    &lt;local:CircleImage BindingContext=\"{x:Reference this}\"\n                       ImageSize=\"{Binding ImageSize}\"\n                       Source=\"{Binding PlaceholderImageSource}\"/&gt;\n\n    &lt;local:CircleImage x:Name=\"Image\"\n\t\t\t\t\t BindingContext=\"{x:Reference this}\"\n                     ImageSize=\"{Binding ImageSize}\"\n                     Source=\"{Binding MainImageSource}\" /&gt;\n\n    &lt;Ellipse BindingContext=\"{x:Reference this}\"\n             Stroke=\"{Binding BorderColor, Converter={StaticResource ColorToBrushConverter}}\"\n             StrokeThickness=\"{Binding BorderThickness}\"\n             HeightRequest=\"{Binding ImageSize}\"\n             WidthRequest=\"{Binding ImageSize}\"\n             IsVisible=\"{Binding IsBorderVisible}\"/&gt;\n\n    &lt;ActivityIndicator IsRunning=\"{Binding Source={x:Reference Image}, Path=IsLoading}\"\n                       BindingContext=\"{x:Reference this}\"\n                       IsVisible=\"{Binding IsLoaderEnabled}\"\n                       Color=\"{Binding BorderColor}\"/&gt;\n&lt;/Grid&gt;</code></pre>\n\n  <p>\n    Vous noterez juste l'apparition d'un nouveau <code>Converter</code> : notre propriété <code>BorderColor</code> transmet un type <code>Color</code> alors que la propriété <code>Stroke</code> de l'Ellipse attend une <code>Brush</code>.\n  </p>\n\n  <p>\n    Pour le reste, ce n'est que du <code>Binding</code> vers les <code>BindableProperty</code> et des astuces que nous avons déjà vu dans la <a href=\"https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-1/\">première partie de l'article</a>.\n  </p>\n\n  <p>\n    Nous avons désormais une image circulaire avancée parfaitement réutilisable dans notre projet ! Chouette !\n  </p>\n\n  <p>\n    Nous en avons même deux : <code>CircleImage</code> et <code>AdvancedCircleImage</code>&nbsp;!\n  </p>\n\n    <h2 id=\"utiliser-le-contrle-dans-le-code\">\n      Utiliser le contrôle dans le code\n    </h2>\n\n  <p>\n    En réalité, vous savez déjà comment utiliser votre contrôle personnalisé puisque vous l'avez déjà fait en incorporant <code>CircleImage</code> dans le XAML de <code>AdvancedCircleImage</code>.&nbsp;\n  </p>\n\n  <p>\n    Il suffit de :\n  </p>\n\n  <ol>\n    <li>Déclarer le namespace auquel appartient votre contrôle dans votre <code>ContentPage</code></li><li>Utiliser le contrôle dans le XAML</li>\n  </ol>\n\n  <p>\n    Voici un exemple très simplifié :\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>&lt;ContentPage x:Class=\"CircleImageDemo.MainPage\"\n            xmlns:ci=\"clr-namespace:CircleImageDemo.CircleImage\"\n            [...]&gt;            \n    &lt;ci:AdvancedCircleImage ImageSize=\"64\"\n                            MainImageSource=\"{Binding PhotoUrl}\"\n                            PlaceholderImageSource=\"{Binding PlaceholderImage}\"\n                            BorderColor=\"Yellow\"\n                            BorderThickness=\"4\"\n                            IsBorderVisible=\"{Binding IsBookmarked}\"\n                            IsLoaderEnabled=\"True\" /&gt;\n&lt;/ContentPage&gt;\n</code></pre>\n\n  <p>\n    Dans le <a href=\"https://github.com/SylvainMoingeon/CircleImageDemo\" target=\"_blank\">projet de démonstration</a>, j'utilise l'<code>AdvancedCircleImage</code> dans une liste (en fait un <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/layouts/bindable-layouts\" target=\"_blank\">BindableLayout</a> mais ce n'est pas le sujet).\n  </p>\n\n    <h2 id=\"le-projet-de-dmonstration\">\n      Le projet de démonstration\n    </h2>\n\n  <p>\n    Je vous redonne le lien vers le dépôt GitHub du projet :&nbsp;<a href=\"https://github.com/SylvainMoingeon/CircleImageDemo\" target=\"_blank\">https://github.com/SylvainMoingeon/CircleImageDemo</a>&nbsp;ainsi que la petite animation :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/demo-circleimage-2.gif\" height=\"726\" width=\"350\" alt=\"\" >\n      \n    </figure>\n\n  <p>\n    Celle-ci simule une page de contacts qui existe avant tout pour illustrer le contrôle personnalisé que nous venons de créer.\n  </p>\n\n  <p>\n    L'<code>AdvancedCircleImage</code> est utilisée pour afficher les photos de contacts. Si l'image n'est pas renseignée ou indisponible (url invalide par exemple), le contrôle affiche une image de substitution par défaut à la place.\n  </p>\n\n  <p>\n    Au clic sur une fiche contact, celui-ci bascule de l'état \"mis en favori\" à l'état \"pas mis en favori\", ce qui affiche ou non la bordure.\n  </p>\n\n  <p>\n    L'indicateur de chargement est fugace mais visible dans les deux dernières fiches puisqu'une image est définie dans chacune d'elle mais inaccessible (erreur 404 et url non joignable).\n  </p>\n\n    <h3 id=\"jetezy-un-il-\">\n      Jetez-y un œil !\n    </h3>\n\n  <p>\n    C'est tout en ce qui concerne l'image circulaire, mais il y a deux ou trois petites choses dans le code qui pourraient vous intéresser si vous n'êtes pas familier avec XAML et <a href=\"https://www.sylvainmoingeon.fr/xamarinforms-a-quoi-ca-sert-mvvm/\">MVVM</a>. Et si vous êtes arrivé jusqu'à la fin de cet article, c'est sans doute le cas !\n  </p>\n\n    <h4 id=\"stringformat\">\n      StringFormat\n    </h4>\n\n  <p>\n    Pour illustrer l'usage de <a href=\"https://www.sylvainmoingeon.fr/xamarinforms-a-quoi-ca-sert-mvvm/\">MVVM</a>, j'ai ajouté un <code>Label</code> qui indique le nombre de contacts en favori. Celui-ci utilise <code><a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/data-binding/string-formatting\" target=\"_blank\">StringFormat</a></code> pour afficher une phrase complète intégrant la valeur obtenue via le <code>Binding</code>. <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/data-binding/string-formatting\" target=\"_blank\"><code>StringFormat</code></a> est un outil très puissant et malheureusement souvent négligé par les développeurs. Il vous évitera pas mal de <a href=\"https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/\">mauvaises bidouilles et de crottes dans le code</a>.\n  </p>\n\n    <h4 id=\"code--xaml-spcifique--la-plateforme\">\n      Code / XAML spécifique à la plateforme\n    </h4>\n\n  <p>\n    Il y a quelques cas à la marge mais suffisamment fréquents où malheureusement un code 100% commun n'est plus suffisant. Cela tient surtout à des différences fonctionnelles entre les plateformes.&nbsp;\n  </p>\n\n  <p>\n    Par exemple, l'encoche et le bouton virtuel apparus sur iOS à partir de l'iPhone X (il me semble).&nbsp;Lorsque vous définissez votre mise-en-page, vous risquez fort d'obtenir quelque chose comme ceci :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/no-safe-area-2.png\" height=\"915\" width=\"422\" alt=\"\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/37/responsive/no-safe-area-2-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/no-safe-area-2-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/no-safe-area-2-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/no-safe-area-2-lg.png 1024w\">\n      \n    </figure>\n\n  <p>\n    Il existe quelques fonctionnalités spécifiques aux plateformes directement accessibles dans le code commun, notamment pour <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/platform/ios/\" target=\"_blank\">iOS</a> et <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/platform/android/\" target=\"_blank\">Android</a>. Ici, nous allons nous intéresser au <code>SafeArea</code> d'iOS.\n  </p>\n\n  <p>\n    Dans le XAML :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;ContentPage \nxmlns:ios=\"clr-namespace:Xamarin.Forms.PlatformConfiguration.iOSSpecific;assembly=Xamarin.Forms.Core\"\nios:Page.UseSafeArea=\"True\"\n[...]&gt;\n    [...]\n&lt;/ContentPage&gt;</code></pre>\n\n  <p>\n    Ce qui corrigera le problème en protégeant les zones de l'encoche et du bouton virtuel pour éviter ces affreux chevauchements :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/safe-area.png\" height=\"915\" width=\"422\" alt=\"\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/37/responsive/safe-area-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/safe-area-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/safe-area-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/safe-area-lg.png 1024w\">\n      \n    </figure>\n\n  <p class=\"msg msg--highlight\">\n    Fouillez dans la documentation, il y en a d'autres qui vous éviterons prises de tête et tentatives de corriger ces choses là vous même en codant dans les projets natifs.\n  </p>\n\n    <h4 id=\"designtimevisible\">\n      DesignTimeVisible\n    </h4>\n\n  <p>\n    Si vous utilisez le <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/xaml/xaml-previewer/?pivots=windows\" target=\"_blank\">Previewer Xamarin.Forms</a>, vous constaterez que vos contrôles personnalisés n'apparaissent pas dedans, ce qui peut être gênant lorsque vous êtes en train de dessiner vos interfaces.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/designtime-not-visible.png\" height=\"811\" width=\"981\" alt=\"Copie d'écran présentant le previewer Xamarin.Forms, le contrôle personnalisé n'est pas affiché\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-not-visible-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-not-visible-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-not-visible-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-not-visible-lg.png 1024w\">\n      <figcaption>L'image circulaire n'est pas affichée pas dans le previewer, quel malheur !</figcaption>\n    </figure>\n\n  <p>\n    La plupart du temps, ça ne tient qu'à une ligne de code ! Un simple attribut à ajouter à votre classe : <code>[DesignTimeVisible(true)]</code>\n  </p>\n\n  <p>\n    Comme son nom l'indique de façon assez explicite, cet attribut indique si la classe doit être traitée ou non par le previewer.\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>[XamlCompilation(XamlCompilationOptions.Compile)]\n[DesignTimeVisible(true)]\npublic partial class AdvancedCircleImage : Grid\n{\n[...]\n}</code></pre>\n\n  <p>\n    Pensez bien à l'ajouter à chacun de vos contrôles personnalisés ! Ici au CircleImage et à l'AdvancedCircleImage. Voici le résultat, une fois l'attribut ajouté à chacune des classes :&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/37/designtime-visible.png\" height=\"758\" width=\"949\" alt=\"Illustration du previewer avec l'attribut DesignTimeVisible\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-visible-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-visible-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-visible-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/37/responsive/designtime-visible-lg.png 1024w\">\n      <figcaption>L'image circulaire est bien affichée grâce à l'attribut DesignTimeVisible(true)</figcaption>\n    </figure>\n\n    <h2 id=\"conclusion\">\n      Conclusion\n    </h2>\n\n  <p>\n    Pour allez plus loin, il faudrait totalement sortir le contrôle personnalisé du projet et pourquoi pas en faire un package nugget. Peut-être une idée pour un prochain article !\n  </p>\n\n  <p>\n    Si vous avez des questions, des astuces ou même des remontrances concernant le sujet, je vous invite à laisser des commentaires. Juste là dessous. ⬇\n  </p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/37/micro-assembly.jpg",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "Xamarin.Forms",
                   "XAML",
                   "MVVM",
                   "From scratch"
            ],
            "date_published": "2020-11-10T18:22:28+01:00",
            "date_modified": "2020-11-10T18:22:43+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/xamarinforms-50-en-approche/",
            "url": "https://www.sylvainmoingeon.fr/xamarinforms-50-en-approche/",
            "title": "Xamarin.Forms 5.0 en approche !",
            "summary": "Xamarin.Forms 5.0 pointe bientôt le bout de son nez et apporte son&hellip;",
            "content_html": "\n  <p>\n    Xamarin.Forms 5.0 pointe bientôt le bout de son nez et apporte son lot de nouveautés. Alors c'est vrai, pour la plupart il s'agit du passage en version stable de fonctionnalités qui étaient déjà disponibles en version expérimentale, mais c'est l'occasion d'en faire une récap et de prendre conscience des avancées qu'à fait Xamarin.Forms cette dernière année.\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p>\n    Pas d'article fleuve pour cette fois, je me contente de vous présenter quelques nouveautés et de transmettre quelques liens vers les ressources qui vous donneront toutes les informations.\n  </p>\n\n  <p>\n    La plupart des informations proviennent de la vidéo que vous trouverez en fin d'article et du post <a href=\"https://devblogs.microsoft.com/xamarin/xamarin-forms-5-preview/\" target=\"_blank\">Xamarin.Forms 5 preview</a> de David Ortinau.\n  </p>\n\n    <h2 id=\"libre-ta-crativit-avec-les-brushes-shapes-et-paths\">\n      Libère ta créativité avec les Brushes, Shapes et Paths\n    </h2>\n\n  <p>\n    L'un des derniers point faible de Xamarin.Forms vient de sauter !\n  </p>\n\n  <p>\n    Créer des formes vectorielles, des dégradés ou des chemins complexes ne nécessitent plus aucune bibliothèque tierce. Les éléments visuels peuvent être découpés selon n'importe quelle géométrie ouvrant la porte à des design modernes et bien léchés. Tout cela grâce aux <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/brushes/\" target=\"_blank\"><code>Brush</code></a>, <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/\" target=\"_blank\"><code>Shape</code></a> et <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/path\" target=\"_blank\"><code>Path</code></a>.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/38/shapes-sxs.png\" height=\"1946\" width=\"1873\" alt=\"Illustration d'interface utilisateur utilisant les brushes, shapes et paths\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/38/responsive/shapes-sxs-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/38/responsive/shapes-sxs-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/38/responsive/shapes-sxs-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/38/responsive/shapes-sxs-lg.png 1024w\">\n      <figcaption>Avec les brushes, shapes et paths, créer des design léchés devient un jeu d'enfant !</figcaption>\n    </figure>\n\n    <h2 id=\"templating-encore-un-pas-de-plus-vers-le-vrai-xaml-de-wpf\">\n      Templating, encore un pas de plus vers le \"vrai\" XAML de WPF\n    </h2>\n\n  <p>\n    Jusqu'à maintenant, on pouvait créer de nouveaux contrôles soit par composition de contrôles <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a> existant soit en créant un nouveau contrôle de toute pièce de façon native, c'est-à-dire en codant à partir de zéro une version par plateforme ciblée.\n  </p>\n\n  <p>\n    La nouvelle version du <code>RadioButton</code> va plus loin et s'approche de ce que WPF propose puisqu'on peut&nbsp;désormais en modifier complètement le contenu à l'aide du templating.\n  </p>\n\n  <p>\n    Ça n'a l'air de rien dit comme ça, mais quand ce sera généralisé à tous les contrôles, ceux-ci pourront prendre n'importe quelle apparence sans toucher au code natif, sans recours à des custom renderers et donc sans besoin de créer de nouveaux contrôles. Cela représente donc une énorme partie du code spécifique aux plateformes qui disparaîtra au profit du code commun. Autant de temps de développement, de maintenance et de correction de bug en moins ! C'est un premier (grand) pas vers le <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a> 100% cross-plateforme et donc vers <a href=\"https://devblogs.microsoft.com/dotnet/introducing-net-multi-platform-app-ui/\" target=\"_blank\">MAUI</a>.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/38/radios-sxs.png\" height=\"590\" width=\"1785\" alt=\"Illustration du templating sur un radioButton\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/38/responsive/radios-sxs-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/38/responsive/radios-sxs-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/38/responsive/radios-sxs-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/38/responsive/radios-sxs-lg.png 1024w\">\n      <figcaption>Templating sur un RadioButton</figcaption>\n    </figure>\n\n    <h2 id=\"enfin-un-carouselview-pleinement-fonctionnel-et-exploitable\">\n      Enfin un CarouselView pleinement fonctionnel et exploitable\n    </h2>\n\n  <p>\n    D'abord intégré en tant que type de Page puis transformé en Layout expérimental, le <code>CarouselView</code> atteint enfin l'âge de la maturité et dispose désormais de tout le nécessaire pour en faire un vrai contrôle utilisable en production : support du <code>VisualStateManager</code>, <code>IndicatorView</code> (par exemple, les petits points qui indiquent sur quel item on est dans la liste), <code>PeekAreaInsets</code> pour faire empiéter les items précédents et suivants sur l'item courant...\n  </p>\n\n  <p>\n    Je vous renvois à la <a href=\"https://docs.microsoft.com/fr-fr/xamarin/xamarin-forms/user-interface/carouselview\" target=\"_blank\" class=\"\" data-link-popup-id=\"1603725756108\">documentation sur le CarouselView</a>.\n  </p>\n<div>  <video loading=\"lazy\" width=\"446\" height=\"654\" controls=\"controls\">\n    <source src=\"../media/files/xf5-carousel-loop.mp4\" type=\"video/mp4\" />\n  </video>\n</div>\n\n    <h2 id=\"a-glisse-avec-le-swipeview\">\n      Ça glisse avec le SwipeView\n    </h2>\n\n  <p>\n    Aussi incroyable que cela puisse paraître, <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a> ne proposait encore aucune solution pour intégrer un mouvement de <code>Swipe</code> sur les items d'une liste. On trouvait bien ici ou là quelques implémentations de ce comportement, mais rien d'officiel ou de bien stable. Au point que j'avais fini par créer mon propre <a href=\"https://github.com/SylvainMoingeon/SwipableView\" target=\"_blank\">composant SwipableView pour Xamarin.Forms</a> !\n  </p>\n\n  <p>\n    C'est désormais de l'histoire ancienne, bienvenue au <code><a href=\"https://docs.microsoft.com/xamarin/xamarin-forms/user-interface/swipeview\" target=\"_blank\" class=\"\">SwipeView</a></code>.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/38/favfighters.gif\" height=\"934\" width=\"466\" alt=\"Illustration animée du SwipeView Xamarin.Forms\" >\n      <figcaption>SwipeView Xamarin.Forms</figcaption>\n    </figure>\n\n    <h2 id=\"autres-nouveauts-et-infos-en-vrac\">\n      Autres nouveautés et infos en vrac\n    </h2>\n\n  <p>\n    Vous trouverez dans Xamarin.Forms 5.0 un nouveau <a href=\"https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/gestures/drag-and-drop\" target=\"_blank\" class=\"\">gesture Drag and Drop</a>, principalement dédié au surface duo avec ses deux écrans. Mais bien entendu, rien ne vous empêche de l'utiliser au sein de vos applications.\n  </p>\n\n  <p>\n    Plusieurs contrôles ont migré dans le <a href=\"https://github.com/xamarin/XamarinCommunityToolkit\" target=\"_blank\" class=\"\">Xamarin Community Toolkit</a>, tels que <code>MediaElement</code> et <code>Expander</code>. Ceux-ci n'étaient pas encore prêts à passer en version finale dans Xamarin.Forms mais l'équipe souhaitait les faire sortir du statut expérimental. Ils sont donc disponibles dans le toolkit.\n  </p>\n\n  <p>\n    Un changement de version majeure s'accompagne souvent de \"breaking changes\", ici&nbsp; notamment :\n  </p>\n\n  <ul>\n    <li>MasterDetailPage et ses propriétés changent de nom suite aux polémiques récentes sur la connotation Maître/Esclave. On parlera désormais de <code>Flyout</code>.</li><li>Côté Apple, <code>UIWebView</code> qui était déprécié a été complètement retirée</li>\n  </ul>\n\n  <p>\n    <a href=\"https://docs.microsoft.com/fr-fr/xamarin/xamarin-forms/release-notes/5.0/5.0.0-pre3\" target=\"_blank\" class=\"\">Le changelog complet de Xamarin.Forms 5.0</a>.\n  </p>\n\n    <h2 id=\"david-ortinau-et-james-montemagno-vous-prsente-tout-a-en-vido\">\n      David Ortinau et James Montemagno vous présente tout ça en vidéo\n    </h2>\n\n  <p>\n    Votre récompense pour être allé au bout de l'article :\n  </p>\n<div><div class=\"post__iframe\"><iframe loading=\"lazy\" src=\"https://channel9.msdn.com/Shows/XamarinShow/XamarinForms-5-Is-Here/player\" width=\"960\" height=\"540\" allowFullScreen frameBorder=\"0\" title=\"Xamarin.Forms 5 Is Here! - Microsoft Channel 9 Video\"></iframe></div>\n</div>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/38/xf-last-year.png",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "Xamarin.Forms"
            ],
            "date_published": "2020-10-26T17:05:57+01:00",
            "date_modified": "2020-10-26T17:27:10+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-1/",
            "url": "https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-1/",
            "title": "Créer un contrôle réutilisable 100% Xamarin.Forms, partie 1",
            "summary": "Dans cet article \"from scratch\" en deux parties, je vous présente une&hellip;",
            "content_html": "\n  <p>\n    Dans cet article \"<a href=\"https://www.sylvainmoingeon.fr/tags/from-scratch/\">from scratch</a>\" en deux parties, je vous présente une manière simple de créer une image circulaire avancée et réutilisable&nbsp;à partir de zéro, sans custom renderer, ni bibliothèque tierce.\n  </p>\n\n  <p>\n    <a href=\"https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-1/\">Partie 1</a> :\n  </p>\n\n  <ul>\n    <li>Créer une image circulaire à l'aide de la propriété <code>Clip</code> et des <code>Geometry</code> récemment apparues dans <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a></li><li>Afficher un indicateur d'activité pendant le chargement de l'image<br></li><li>Afficher une image de substitution en cas d'absence d'image ou d'url invalide en utilisant la technique de superposition dans une <code>Grid</code><br></li><li>Afficher une bordure autour de l'image à l'aide des <code>Shape</code>, autre nouveauté de <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a><br></li><li>Utiliser des <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/internals/experimental-flags\" target=\"_blank\">fonctionnalités expérimentales</a> avec la version stable actuelle de <a href=\"https://www.sylvainmoingeon.fr/tags/xamarinforms/\">Xamarin.Forms</a><br></li>\n  </ul>\n\n  <p>\n    <a href=\"https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-2/\">Partie 2</a> :\n  </p>\n\n  <ul>\n    <li>Créer un contrôle réutilisable et compatible <a href=\"https://www.sylvainmoingeon.fr/tags/mvvm/\">MVVM</a></li><ul><li>Définir des propriétés bindables (<code>BindableProperty</code>)</li><li>Utiliser les <code>Converters</code></li></ul>\n  </ul>\n\n  <p>\n    Les présentations sont faites, place au concret.\n  </p>\n<hr class=\"separator separator--dots\" />\n\n  <p class=\"msg msg--info\">\n    Certaines fonctionnalités comme les <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/\" target=\"_blank\">Shapes</a>&nbsp;et leurs  <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/geometries\" target=\"_blank\">Geometries</a> nécessitent Xamarin.Forms 4.8 ou supérieure, pensez bien à mettre-à-jour le package après avoir créé votre solution !\n  </p>\n\n    <h2 id=\"commenons-par-la-fin\">\n      Commençons par la fin\n    </h2>\n\n  <p>\n    Pas de suspens, je vous livre d'emblée un visuel pour que vous sachiez où je vous amène. Celui-ci simule une page de contact :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <a href=\"https://github.com/SylvainMoingeon/CircleImageDemo\" target=\"_blank\">\n        <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/36/demo-circleimage-3.gif\" height=\"726\" width=\"350\" alt=\"Démonstration de l'image circulaire avec ses différentes options\" >\n      </a>\n      <figcaption>Démonstration de l'image circulaire avec ses différentes options</figcaption>\n    </figure>\n\n  <p>\n    Niveau contenu, la page affiche une liste de contacts dont chaque photo provient d'une source différente :\n  </p>\n\n  <ol>\n    <li>Une photo chargée à partir d'une url</li><li>Une photo ajoutée au projet en tant que ressource</li><li>Pas de photo</li><li>Une photo pointant sur une url retournant une erreur 404</li><li>Une photo pointant sur une url inaccessible</li>\n  </ol>\n\n  <p>\n    Les trois derniers cas présentent une image de substitution par défaut car aucune photo valide ne peut être affichée.\n  </p>\n\n  <p>\n    Les contacts enregistrés comme favoris sont signalés par une bordure jaune autour de la photo.\n  </p>\n\n  <p>\n    Pour finir, si vous observez bien l'animation vous remarquerez un bref indicateur de chargement sur les deux dernières photos, le temps que Xamarin.Forms échoue à charger les images.\n  </p>\n\n  <p>\n    Mais je vous vois frétiller d'impatience, vous êtes venu ici pour voir du code, alors allons-y\n  </p>\n\n    <h2 id=\"clip-clip-clip-dcoupage-de-limage\">\n      Clip clip clip, découpage de l'image\n    </h2>\n\n  <p>\n    Plutôt que de vous livrer de gros blocs de code illisibles sur une page web, je vais dans cet article aller directement à l'essentiel, vous trouverez le code complet sur mon <a href=\"https://github.com/SylvainMoingeon\" target=\"_blank\">compte GitHub</a>, comme d'habitude.\n  </p>\n\n  <p>\n    Pour commencer, comment afficher une image circulaire ?\n  </p>\n\n  <p>\n    Nous allons utiliser deux fonctionnalités apparues dernièrement dans Xamarin.Forms, la propriété <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/geometries#clip-with-a-geometry\" target=\"_blank\">Clip</a>&nbsp;(<i>découper</i> en anglais) et les <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/geometries\" target=\"_blank\">Geometries</a>.\n  </p>\n\n  <p>\n    <code>Clip</code> est une propriété des <a href=\"https://docs.microsoft.com/en-us/dotnet/api/xamarin.forms.visualelement\" target=\"_blank\">VisualElements</a>, de type <code>Geometry</code> et qui définit le contour du contenu d'un élément visuel.&nbsp;\n  </p>\n\n  <p>\n    Ce n'est pas clair ? Un exemple, celui qui nous concerne : j'ai une image carrée et je souhaite afficher uniquement son contenu inscrit dans un cercle. Je vais donc définir une <code>Geometry</code> circulaire et l'appliquer à <code>Clip</code> pour découper l'image selon cette forme.\n  </p>\n\n  <p>\n    Attention les yeux, voici le code :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Image Source=\"monimage.png\" HeightRequest=\"200\" WidthRequest=\"200\"&gt;\n    &lt;Image.Clip&gt;\n        &lt;EllipseGeometry RadiusX=\"100\"\n                         RadiusY=\"100\"\n                         Center=\"100,100\" /&gt;\n    &lt;/Image.Clip&gt;\n&lt;/Image&gt;</code></pre>\n\n  <p>\n    La géométrie circulaire n'existant pas, nous nous baserons sur une ellipse. Celle-ci se définit à partir d'un centre et de deux rayons, horizontal (<code>RadiusX</code>) et vertical (<code>RadiusY</code>). Pour obtenir un cercle, il suffit que <code>RadiusX</code> et <code>RadiusY</code> aient la même valeur. <code>Center</code> permet de positionner l'ellipse par rapport à son contenant.\n  </p>\n\n  <p>\n    Pour simplifier le calcul et le positionnement, autant partir d'une image carrée.\n  </p>\n\n  <p>\n    Pour obtenir un cercle centré et inscrit dans le carré, les rayons seront moitié plus petits que le côté de l'image et le centre du cercle sera au centre de l'image.\n  </p>\n\n  <p>\n    Voilà, obtenir une image circulaire c'est devenu aussi simple que ça avec Xamarin.Forms. Beaucoup de texte et d'explications pour quelque chose devenu finalement assez trivial !\n  </p>\n\n    <h2 id=\"limage-de-substitution\">\n      L'image de substitution\n    </h2>\n\n  <p>\n    Comment faire pour afficher une image par défaut quand il n'y a pas d'image à afficher ?\n  </p>\n\n  <p>\n    On va utiliser une technique ancienne et bien connue mais toujours très utile : l'empilement dans une <code>Grid</code>. Les éléments contenus dans une même cellule d'une Grid se superposent les uns sur les autres, le dernier déclaré dans le fichier Xaml étant au-dessus, la lecture de celui-ci étant séquentielle.\n  </p>\n\n  <p>\n    Nous allons donc définir une Grid à une seule cellule et y ajouter deux <code>Images</code> : la première est destinée à afficher l'image de substitution, la seconde à afficher l'image proprement dite.\n  </p>\n\n  <p>\n    Pour que les deux images se superposent sans décalage, il est nécessaire que les deux composants <code>Image</code>&nbsp;et leurs ellipses aient les mêmes dimensions.\n  </p>\n\n  <p>\n    Nous renseignerons également les propriétés <code>HorizontalOptions</code> et <code>VerticalOptions</code> de la Grid avec des valeurs qui forceront celle-ci à adopter les mêmes dimensions que son contenu.\n  </p>\n\n  <p class=\"msg msg--info\">\n    <a href=\"https://fr.wikipedia.org/wiki/Ne_vous_répétez_pas\" target=\"_blank\">DRY</a> - Je vais avoir besoin de créer deux fois une image circulaire simple, et il est probable que ce besoin se répète dans d'autres contextes. Dans la <a href=\"https://www.sylvainmoingeon.fr/creer-un-controle-reutilisable-100-xamarinforms-partie-2/\">seconde partie de l'article</a>, nous verrons comment créer un contrôle&nbsp;<code>CircleImage</code>&nbsp;réutilisable encapsulant le code précédent.&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Grid HorizontalOptions=\"Center\" VerticalOptions=\"Center\"&gt;\n    &lt;local:CircleImage Source=\"monPlaceholder.png\" ImageSize=\"128\" /&gt;\n    &lt;local:CircleImage Source=\"monImage.png\" ImageSize=\"128\" /&gt;\n&lt;/Grid&gt;</code></pre>\n\n  <p>\n    De cette manière, l'image vient cacher le placeholder si elle est disponible, sinon on voit ce dernier à la place.\n  </p>\n\n    <h2 id=\"lindicateur-de-chargement\">\n      L'indicateur de chargement\n    </h2>\n\n  <p>\n    Aujourd'hui c'est atelier empilage, nous allons encore superposer : ajoutons un <code>ActivityIndicator</code> à notre Grid.\n  </p>\n\n  <p>\n    L'<code>ActivityIndicator</code> a un visuel légèrement différent sous Android et iOS mais le principe reste le même : c'est un bidule qui tourne de façon hypnotique pour faire oublier le temps qui passe à l'utilisateur. Pour le voir tourner, il suffit d'affecter <code>True</code> à sa propriété <code>IsRunning</code>.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Grid&gt;\n    &lt;local:CircleImage x:Name=\"monPlaceholder\" ImageSize=\"128\" /&gt;\n    &lt;local:CircleImage x:Name=\"monImage\" ImageSize=\"128\" /&gt;\n    \n    &lt;ActivityIndicator  IsRunning=\"True\"\n                        VerticalOptions=\"Center\"\n                        HorizontalOptions=\"Center\"\n                        /&gt;\n&lt;/Grid&gt;</code></pre>\n\n  <p>\n    Nous avons donc un indicateur qui tourne au centre de notre image. C'est bien, mais il tourne en permanence et nous aurions besoin de l'activer uniquement pendant le chargement de l'image.\n  </p>\n\n  <p>\n    Cela tombe bien, le contrôle <code>Image</code> expose une propriété <code>IsLoading</code>&nbsp;qui vaut <code>True</code> pendant le chargement de l'image et <code>False</code> une fois le chargement terminé, peu importe que l'opération ce soit bien déroulée ou non.\n  </p>\n\n  <p>\n    Reste une question : comment lier la propriété <code>IsRunning</code> de l'indicateur à la propriété <code>IsLoading</code> de l'image ? Par un <code>Binding</code>&nbsp;bien entendu ! Mais comment binder une propriété d'un contrôle&nbsp;à une propriété d'un autre contrôle ? En précisant la source du Binding !\n  </p>\n\n  <p>\n    Le plus simple ici est de donner un nom explicite à notre contrôle Image (<i>monImage</i> par exemple) et de se référer à ce nom comme source du Binding. La propriété visée sera définie comme <code>Path</code> du Binding :&nbsp;<code>\"{Binding Source={x:Reference monImage}, Path=IsLoading}\"</code>\n  </p>\n\n  <p>\n    Avec un peu plus de contexte, cela donne :\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Grid&gt;\n    &lt;local:CircleImage x:Name=\"monPlaceholder\" ImageSize=\"128\" /&gt;\n    &lt;local:CircleImage x:Name=\"monImage\" ImageSize=\"128\" /&gt;\n    \n    &lt;ActivityIndicator  IsRunning=\"{Binding Source={x:Reference monImage}, Path=IsLoading}\"\n                        VerticalOptions=\"Center\"\n                        HorizontalOptions=\"Center\"\n                        /&gt;\n&lt;/Grid&gt;\n</code></pre>\n\n  <p>\n    De cette façon, nous verrons un indicateur de chargement tournoyer au centre de l'image durant le chargement de celle-ci.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/36/activityIndicator-3.gif\" height=\"74\" width=\"74\" alt=\"ActivityIndicator au centre d'une image\" >\n      <figcaption>Et pourtant, elle tourne !</figcaption>\n    </figure>\n\n    <h2 id=\"la-bordure\">\n      La bordure\n    </h2>\n\n  <p>\n    Pour afficher une bordure autour de l'image, nous allons tirer parti des <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/\" target=\"_blank\"><code>Shapes</code></a> encore sous forme expérimentale sous Xamarin.Forms 4.8.\n  </p>\n\n  <p>\n    Si la version de Xamarin.Forms que vous utilisez n'intègre pas encore les <code>Shapes</code> de façon officielle, vous devrez déclarer la fonctionnalité expérimentale dans le constructeur de la classe&nbsp;<code>App.xaml.cs</code>&nbsp;sous peine de lever une <code>InvalidOperationException</code> au lancement de l'application :\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public App()\n{\n    Device.SetFlags(new string[] { \"Shapes_Experimental\" });\n    \n    InitializeComponent();\n    \n    MainPage = new MainPage();\n}\n</code></pre>\n\n  <p>\n    Les <code>Shapes</code> comme leur nom l'indique sont des formes que l'on peut ajouter en tant que <code>VisualElement</code> sur la page. La forme qui nous intéresse est là encore une <code><a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/user-interface/shapes/ellipse\" target=\"_blank\">Ellipse</a></code>.\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    Attention à ne pas confondre l'<code>EllipseGeometry</code> qui est la <b>description</b> d'un objet géométrique, avec l'<code>Ellipse</code> qui est un contrôle Visuel !\n  </p>\n\n  <p>\n    <code>Stroke</code> et <code>StrokeThickness</code> sont les deux propriétés exposées par l'Ellipse qui définissent la couleur et l'épaisseur de son contour. Nous n'aurons pas besoin des autres propriétés, mais nous pourrions affiner en définissant le type de contour (pointillé...) ou la couleur de remplissage de l'ellipse.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Ellipse Stroke=\"Yellow\" StrokeThickness=\"2\" /&gt;</code></pre>\n\n  <p>\n    Ensuite, c'est juste une histoire d'empilage dans la <code>Grid</code>, vous commencez à avoir l'habitude.<br><br>\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;Grid&gt;\n    &lt;local:CircleImage x:Name=\"monPlaceholder\" ImageSize=\"128\" /&gt;\n    &lt;local:CircleImage x:Name=\"monImage\" ImageSize=\"128\" /&gt;\n    \n    &lt;Ellipse Margin=\"0\"\n             HorizontalOptions=\"Center\"\n             VerticalOptions=\"Center\"\n             Stroke=\"Yellow\"\n             StrokeThickness=\"2\"\n             HeightRequest=\"128\"\n             WidthRequest=\"128\"\n             /&gt;\n             \n    &lt;ActivityIndicator [...]  /&gt;\n&lt;/Grid&gt;</code></pre>\n\n  <p>\n    Ce qui donne :\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/36/circle-with-border.png\" height=\"223\" width=\"223\" alt=\"Une image circulaire bordée de jaune\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/36/responsive/circle-with-border-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/36/responsive/circle-with-border-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/36/responsive/circle-with-border-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/36/responsive/circle-with-border-lg.png 1024w\">\n      <figcaption>Une image circulaire bordée de jaune</figcaption>\n    </figure>\n\n    <h2 id=\"fin-de-premire-partie\">\n      Fin de (première) partie\n    </h2>\n\n  <p>\n    L'article s'avère bien plus détaillé que je ne l'avais prévu au départ et ça commence à être bien consistant. Je vous laisse donc digérer tout ça et vous donne rendez-vous pour la seconde partie dans laquelle nous verrons comment assembler tout ceci pour en faire un contrôle réutilisable avec des propriétés Bindable pour le rendre \"<a href=\"https://www.sylvainmoingeon.fr/tags/mvvm/\">MVVM</a> friendly\".\n  </p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/36/micro-assembly.jpg",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "Xamarin.Forms",
                   "XAML",
                   "From scratch"
            ],
            "date_published": "2020-10-22T12:13:26+02:00",
            "date_modified": "2020-11-10T11:08:18+01:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/xamarinforms-inversion-de-dependance-facile-et-pas-chere/",
            "url": "https://www.sylvainmoingeon.fr/xamarinforms-inversion-de-dependance-facile-et-pas-chere/",
            "title": "L&#x27;inversion de dépendance facile (et pas chère)",
            "summary": "\n  <p>\n    Ah, l'inversion de dépendance, voilà une pratique qui est parfois difficile à faire passer dans les équipes. En particulier quand il s'agit d'applications mobiles. Les arguments sont toujours les mêmes :&nbsp;\n  </p>\n\n  <ul>\n    <li>Ça ajoute trop de complexité</li><li>Ça bouffe des ressources et plombe les performances</li><li>On n'en a pas besoin de toute façon on n'utilise qu'une seule implémentation</li><li>Les frameworks c'est le mal absolu</li>\n  </ul>\n\n    <blockquote class=\"blockquote\">\n      - Tu peux m'expliquer l'inversion de dépendance ?<br>- Fastoche, tu ouvres le gestionnaire de package nuget et tu installes AutoFac<br>\n    </blockquote>\n\n  <p>\n    Et si on trouvait un moyen simple, efficace et sans framework d'inverser les dépendances ?\n  </p>\n",
            "content_html": "\n  <p>\n    Ah, l'inversion de dépendance, voilà une pratique qui est parfois difficile à faire passer dans les équipes. En particulier quand il s'agit d'applications mobiles. Les arguments sont toujours les mêmes :&nbsp;\n  </p>\n\n  <ul>\n    <li>Ça ajoute trop de complexité</li><li>Ça bouffe des ressources et plombe les performances</li><li>On n'en a pas besoin de toute façon on n'utilise qu'une seule implémentation</li><li>Les frameworks c'est le mal absolu</li>\n  </ul>\n\n    <blockquote class=\"blockquote\">\n      - Tu peux m'expliquer l'inversion de dépendance ?<br>- Fastoche, tu ouvres le gestionnaire de package nuget et tu installes AutoFac<br>\n    </blockquote>\n\n  <p>\n    Et si on trouvait un moyen simple, efficace et sans framework d'inverser les dépendances ?\n  </p>\n\n\n    <h2 id=\"inversion-et-injection-de-dpendances\">\n      Inversion et injection de dépendances\n    </h2>\n\n  <p>\n    Le but ici n'est pas de proposer un cours complet sur les principes d'inversion et d'injection de dépendances mais juste de présenter une astuce rapide, facile et pas chère pour effectuer une inversion de dépendance sans avoir recours à aucun framework.\n  </p>\n\n  <p>\n    Si vous ne connaissez pas ces principes, je vous invite à vous rendre sur votre moteur de recherche préféré et d'y saisir les mots clés suivants (pas tous en même temps, hein !) : <a href=\"https://lmgtfy.app/?q=inversion+de+d%C3%A9pendance\" target=\"_blank\">inversion de dépendance</a> / <a href=\"https://lmgtfy.app/?q=injection+d%C3%A9pendance\" target=\"_blank\">injection de dépendance</a> / <a href=\"https://lmgtfy.app/?q=dependency+inversion+principle\" target=\"_blank\">dependency inversion</a> / <a href=\"https://lmgtfy.app/?q=dependency+injection+principle\" target=\"_blank\">dependency injection</a> / <a href=\"https://lmgtfy.app/?q=constructor+injection\" target=\"_blank\">constructor injection</a> / <a href=\"https://lmgtfy.app/?q=ioc+di\" target=\"_blank\">ioc di</a>.\n  </p>\n\n  <p>\n    Vous verrez qu'assez souvent cela vous ramène à l'un ou l'autre des frameworks à la mode. Et dans les cas les plus complexes, c'est pertinent de ne pas réinventer la roue. Mais dans une application mobile, on a souvent besoin de quelque chose de beaucoup plus simple sans s'encombrer d'un framework ou d'une bibliothèque supplémentaire.\n  </p>\n\n    <h2 id=\"pourquoi-une-inversion-de-contrle-\">\n      Pourquoi une inversion de contrôle ?\n    </h2>\n\n  <p>\n    Sans m'étendre sur le sujet, le but principal de l'inversion de contrôle est de ne pas laisser une classe dépendre d'autres classes. Elle ne doit dépendre que <a href=\"https://fr.wikipedia.org/wiki/Abstraction_(informatique)#Programmation_orientée_objet\" target=\"_blank\">de leurs abstractions</a>.\n  </p>\n\n  <p>\n    L'application de ce principe a des conséquences assez variées mais qui vont toutes dans le sens d'un code plus propre et mieux structuré :\n  </p>\n\n  <ul>\n    <li><b>Respect du principe de <a href=\"https://fr.wikipedia.org/wiki/Principe_de_responsabilité_unique\" target=\"_blank\">responsabilité unique</a></b> : la classe ne voit que des abstractions, la responsabilité de ce qu'il s'y passe concrètement ne la regarde pas</li><li><b>Découplage</b> : les classes ne sont pas liées entre elles</li><li><b>Modularité</b> : une classe n'étant pas liée à une implémentation particulière de ses dépendances, celle-ci est facilement interchangeable. Une même classe pourra, par exemple, lire les données dans une base Sql, un fichier json ou xml en fonction de l'implémentation du service d'accès aux données injecté.</li><li><b>Testabilité</b> : puisqu'on ne dépend pas d'une implémentation concrète, on peut facilement utiliser des <a href=\"https://fr.wikipedia.org/wiki/Mock_(programmation_orientée_objet)\" target=\"_blank\">simulacres</a> pour effectuer des tests unitaires.</li>\n  </ul>\n\n  <p>\n    Pour l'astuce que je vais vous présenter très bientôt (je vous tiens en haleine !) nous allons passer les dépendances via le constructeur de la classe.\n  </p>\n\n  <p>\n    L'intérêt est double :\n  </p>\n\n  <ul>\n    <li><b>Le code est lisible</b> car la liste des dépendances d'une classe est directement dans la signature de son constructeur : pas de surprise cachée dans le code de la classe</li><li>On ne peut pas oublier de passer une dépendance à la classe puisqu'on en a besoin pour l'instancier</li>\n  </ul>\n\n  <p>\n    Ici, les puristes auront sans doute les poils qui se dressent car ce que je vais vous montrer n'est pas au sens strict de l'injection de dépendance, mais pour les cas simples, ça en présente tous les avantages.\n  </p>\n\n  <p>\n    Ce que nous allons chercher à faire c'est avoir pour une classe :\n  </p>\n\n  <ul>\n    <li>Une implémentation par défaut de ses dépendances</li><li>La possibilité d'injecter d'autres implémentations en cas de besoin (notamment pour les tests unitaires)</li>\n  </ul>\n\n    <h2 id=\"linversion-de-contrle-pas--pas\">\n      L'inversion de contrôle pas à pas\n    </h2>\n\n    <h3 id=\"partons-de-pas-grandchose\">\n      Partons de pas grand-chose\n    </h3>\n\n  <p>\n    Partons d'une classe ne suivant aucun pattern particulier, la dépendance est directement instanciée dans le corps de la classe. Beurk !\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public class MaClasse\n{\n    private readonly MaDepdendance _maDependance;\n\n    MaClasse()\n    {\n        _maDependance = new MaDependance();\n    }\n}</code></pre>\n\n  <p>\n    Imaginez juste un instant que la classe <code>MaDependance</code> dépende elle-même d'une autre classe, bienvenue au <a href=\"https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/\">code spaghetti et aux crottes de nez dans le code</a> !\n  </p>\n\n  <p>\n    Dans un premier temps, nous allons simplement chercher à passer la dépendance depuis l'extérieur. De cette façon, notre classe n'aura plus la responsabilité de l'instancier. Rien de bien compliqué.\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public class MaClasse\n{\n    private readonly MaDepdendance _maDependance;\n\n    // dépendance injectée via la constructeur\n    MaClasse(MaDependance maDependance)\n    {\n        _maDependance = maDependance ?? throw new ArgumentNullException(\"Un message bien senti !\");\n    }\n}</code></pre>\n\n  <p>\n    Mieux mais pas terrible. Nous n'avons en réalité fait que déplacer le problème. Pour l'instant, toujours pas de découplage ou de modularité dans le code.\n  </p>\n\n    <h3 id=\"dpendons-de-labstraction-au-lieu-de-limplmentation\">\n      Dépendons de l'abstraction au lieu de l'implémentation\n    </h3>\n\n  <p>\n    Pour faire mieux, nous allons appliquer <i>stricto-sensu</i> le principe d'inversion de contrôle : <b>dépendre d'abstraction au lieu d'implémentation</b>.\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public class MaClasse\n{\n    private readonly IMaDependance _maDependance;\n\n    // On injecte une abstraction (interface) au lieu d'une implémentation concrète\n    MaClasse(IMaDependance maDependance)\n    {\n        _maDependance = maDependance ?? throw new ArgumentNullException(\"Un message bien senti !\");\n    }\n}</code></pre>\n\n  <p>\n    Vous avez vu ? Le \"I\" pour <code>interface</code>&nbsp;?&nbsp;\n  </p>\n\n  <p>\n    Ce n'est bien entendu qu'une convention de nommage, mais en réalité il s'est passé ceci :\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>// interface décrivant les membres à implémenter\npublic interface IMaDependance\n{\n    MaMethode();\n}\n\n// MaDependance implémente désormais l'interface IMaDependance\npublic class MaDependance : IMaDependance\n{\n    public void MaMethode()\n    {\n        // implémentation de l'interface\n    }\n}</code></pre>\n\n  <p>\n    Au lieu de passer directement l'implémentation concrète de la dépendance, nous avons passé son abstraction. Chouette !\n  </p>\n\n  <p>\n    Reste un souci. Sans l'aide d'un framework qui ferait ça dynamiquement, il reste nécessaire de passer explicitement les dépendances au constructeur de notre classe lors de son instanciation.\n  </p>\n\n  <p>\n    Double problème :\n  </p>\n\n  <ol>\n    <li>Cela peut vite devenir très lourd si la classe a plusieurs dépendances</li><li>Que se passe t'il si l'on souhaite changer d'implémentation alors que celle-ci est passée en dur partout dans le code ?</li>\n  </ol>\n\n    <h3 id=\"ajoutons-une-implmentation-par-dfaut\">\n      Ajoutons une implémentation par défaut\n    </h3>\n\n  <p>\n    Pour ajouter une implémentation pour défaut, nous allons simplement tirer parti du mot clé <code>this</code> appliqué au constructeur de la classe. <code>this</code> permet, en effet, d'appeler un constructeur à partir d'un autre constructeur.&nbsp;\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public class MaClasse\n{\n    private readonly IMaDependance _maDependance;\n\n    // Constructeur acceptant un argument\n    MaClasse(IMaDependance maDependance)\n    {\n        _maDependance = maDependance ?? throw new ArgumentNullException(\"Un message bien senti !\");\n    }\n\n    // Constructeur vide, qui par appelle l'autre constucteur avec 'this'\n    MaClasse() : this(new MaDepdendance()){}\n}</code></pre>\n\n  <p>\n    De cette manière, le constructeur vide appellera systématiquement le constructeur ayant la dépendance en argument en lui passant une implémentation concrète.\n  </p>\n\n  <p>\n    Nous obtenons donc deux manières d'instancier notre classe :&nbsp;\n  </p>\n\n  <ul>\n    <li>Avec le constructeur vide : la dépendance sera implémentée par défaut</li><li>Avec l'autre constructeur : la dépendance sera implémentée <i>manuellement</i> par le développeur</li>\n  </ul>\n\n  <p>\n    Nous avons donc atteint notre objectif premier avec un simple mot clé <code>this</code> du langage C#&nbsp;\n  </p>\n\n  <p>\n    C'est bien, mais il subsiste un problème : l'implémentation par défaut est instanciée en dur dans le code :\n  </p>\n\n  <ul>\n    <li>Si on suit les principes <a href=\"https://fr.wikipedia.org/wiki/SOLID_%28informatique%29\" target=\"_blank\">SOLID</a>, <b>une classe doit être évolutive sans modification</b>. Ici, ce n'est pas le cas : le jour où on aura besoin de changer d'implémentation par défaut, il sera nécessaire de modifier le code au niveau du constructeur.</li><li>Si plusieurs classes dépendent du même service, on risque simplement d'oublier de modifier le constructeur de l'une ou l'autre des classes qui utilisent <code>MaDependance</code>.</li>\n  </ul>\n\n  <p>\n    Trouvons donc un moyen de globaliser la correspondance entre une abstraction et son implémentation par défaut. C'est-à-dire, qu'en pratique, <b>pour une interface donnée on obtienne systématiquement la même implémentation</b>.\n  </p>\n\n    <h3 id=\"prenons-une-bonne-rsolution\">\n      Prenons une bonne résolution\n    </h3>\n\n  <p>\n    Avec Xamarin.Forms nul besoin de chercher très loin, le <code>DependencyService</code> jouera ce rôle à merveille.&nbsp;\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    A strictement parler, le <code>DependencyService</code> sert surtout à la résolution d'implémentations natives (dans les projets iOS, Android...) pour les utiliser dans le projet commun Xamarin.Forms.<br>En pratique, cela fonctionne très bien pour résoudre n'importe quel type.<br>\n  </p>\n\n  <p>\n    Le <code>DependencyService</code> expose principalement trois méthodes : <code>Register</code>, <code>Get</code> et <code>Resolve</code>.&nbsp;\n  </p>\n\n  <p>\n    <code>Register</code> ne souffre pas d’ambiguïté, c'est ici que nous enregistrerons notre implémentation par défaut.\n  </p>\n\n  <p>\n    Pour la simplicité de la démonstration, et parce qu'en pratique ce sera souvent le cas, je prends la classe <code>App.xaml.cs</code> comme point d'entrée pour enregistrer mes dépendances.\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n        \n        // On enregistre le type MaDependance pour l'interface IMaDependance\n        DependencyService.Register&lt;IMaDependance, MaDependance&gt;();\n        \n        MainPage = new MainPage();\n    }\n    \n    //[...]\n }</code></pre>\n\n  <p>\n    Faites comme vous voulez, ce qui est important c'est de bien enregistrer les types avant toute utilisation du <code>DependencyService</code> dans le code, cela va de soi.\n  </p>\n\n  <p>\n    <code>Get</code> et <code>Resolve</code> semblent fonctionner de manière identique, cependant la documentation affichée dans Visual Studio nuance quelque peu leur usage :\n  </p>\n\n  <p>\n    <strong></strong><em><strong>Resolve</strong> :&nbsp;The method to use to resolve dependencies by type<br><strong>Get</strong> :&nbsp;Returns the platform-specific implementation of type T</em>\n  </p>\n\n  <p>\n    <code>Resolve</code> semble mieux correspondre à notre besoin.\n  </p>\n<pre class=\"line-numbers  language-csharp\"><code>public class MaClasse\n{\n    private readonly IMaDependance _maDependance;\n\n    MaClasse(IMaDependance maDependance)\n    {\n        _maDependance = maDependance ?? throw new ArgumentNullException(\"Un message bien senti !\");\n    }\n    \n    // On résoud le type avec le DependencyService\n    MaClasse() : this(DependencyService.Resolve&lt;IMaDependance&gt;()){}\n}</code></pre>\n\n  <p>\n    Désormais, notre classe ne dépend plus d'aucune implémentation concrète, elle n'est plus qu'abstraction !&nbsp;\n  </p>\n\n  <p>\n    Imaginons que de nombreuses classes dépendent de <code>IMaDependance</code> et qu'on ait besoin de changer l'implémentation de la dépendance partout dans le code, il suffira de remplacer l'implémentation enregistrée dans&nbsp;<code>DependencyService.Register</code>.\n  </p>\n\n  <p>\n    Pour le reste, ça n'a pas changé : pour injecter une implémentation différente il est nécessaire d'instancier la classe en passant explicitement la dépendance dans le constructeur. Ce sera notamment le cas pour les simulacres créés à fin de tests unitaires.\n  </p>\n\n    <h2 id=\"conclusion\">\n      Conclusion\n    </h2>\n\n  <p>\n    Si l'inversion de contrôle est souvent confondue avec le framework qui la met en oeuvre, il s'agit en réalité d'un principe à l'énoncé plutôt simple : <i>une classe doit dépendre d'abstractions et non d'implémentations</i>.\n  </p>\n\n  <p>\n    Et dans les cas simples, on peut l'appliquer <b>sans framework</b> et profiter de ses avantages à moindre frais : <b>découplage</b>, <b>modularité</b>, <b>testabilité</b>.\n  </p>\n\n  <p>\n    Je vous en ai présenté ici une façon fort simple à base d'<code>interface</code>, d'appel à un constructeur par défaut avec le mot clé <code>this</code> et du <code>DependencyService</code> de Xamarin.Forms.\n  </p>\n\n  <p class=\"msg msg--info\">\n    Pour un projet mobile, c'est souvent largement suffisant !\n  </p>\n\n    <h2 id=\"le-code-source\">\n      Le code source\n    </h2>\n\n  <p>\n    Comme toujours, un petit projet d'exemple sur mon <a href=\"https://github.com/SylvainMoingeon/DITheEasyWayDemo\" target=\"_blank\">GitHub</a>. Celui-ci est minimaliste : un service, un ViewModel et un test unitaire. Son seul intérêt est de démontrer le fonctionnement de tout cela de façon un peu moins théorique.\n  </p>\n\n  <p>\n    Et chez vous l'inversion de contrôle, ça se passe comment ?\n  </p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/34/ioc-cover.jpg",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "ioc",
                   "bonnes pratiques",
                   "Xamarin.Forms",
                   "SOLID"
            ],
            "date_published": "2020-09-29T18:42:53+02:00",
            "date_modified": "2020-09-30T12:18:08+02:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/xamarinforms-a-quoi-ca-sert-mvvm/",
            "url": "https://www.sylvainmoingeon.fr/xamarinforms-a-quoi-ca-sert-mvvm/",
            "title": "[Xamarin.Forms] MVVM - A quoi ça sert ?",
            "summary": "\n  <p>\n    Je m'en souviens encore, mon premier projet WPF où avec l'habitude des WinForms j'ai commencé à coder la logique métier dans le code-behind de la fenêtre. J'ai alors senti un regard lourd dans mon dos, un ricanement et, tel le Denis Brogniart du code, mon collègue qui me lâche son irrévocable sentence :\n  </p>\n\n    <blockquote class=\"blockquote\">\n      Avec WPF, tu dois faire du MVVM. D'ailleurs, à partir d'aujourd'hui, on va tous faire du MVVM.\n    </blockquote>\n\n  <p>\n    Et donc, on s'y est tous mis. De façon purement dogmatique, sans rien y comprendre. Ni le pourquoi, ni le comment. Sans connaître ses véritables raisons d'être, sans en avoir étudié les avantages et contraintes. Sans même avoir conscience qu'il s'agissait d'une architecture logicielle et donc de la fondation de notre applicatif.\n  </p>\n\n  <p>\n    Alors donc, ce fût un grand moment de n'importe quoi où chacun cherchait par tous les moyens à contourner les <i>problèmes</i> posés par MVVM. <strong>Et quand tu commences à considérer ton architecture comme un problème, c'est qu'il y en a un sérieux dans l'équipe de développement</strong>. Bien entendu, les ressources sur le sujet étaient ténues à l'époque et consistaient principalement à la résolution des <i>problèmes</i>&nbsp;apportés par MVVM. Oui, on était tous dans le même bateau.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/33/dans-le-meme-bateau.jpg\" height=\"531\" width=\"940\" alt=\"Les candidats de Koh Lanta sautent du bateau\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-lg.jpg 1024w\">\n      <figcaption>Revenez, ce n'est pas si terrible MVVM !</figcaption>\n    </figure>\n\n  <p>\n    Heureusement, une dizaine d'années plus tard tout cela a bien changé et... hein ? Quoi ? C'est toujours comme ça ? Des équipes qui <i>font du MVVM</i> sans réfléchir, sans le comprendre, juste parce qu'on leur a dit <i>c'est comme ça</i>.\n  </p>\n\n  <p>\n    Il est peut-être temps de prendre un peu de recul et de comprendre à quoi ça sert.\n  </p>\n",
            "content_html": "\n  <p>\n    Je m'en souviens encore, mon premier projet WPF où avec l'habitude des WinForms j'ai commencé à coder la logique métier dans le code-behind de la fenêtre. J'ai alors senti un regard lourd dans mon dos, un ricanement et, tel le Denis Brogniart du code, mon collègue qui me lâche son irrévocable sentence :\n  </p>\n\n    <blockquote class=\"blockquote\">\n      Avec WPF, tu dois faire du MVVM. D'ailleurs, à partir d'aujourd'hui, on va tous faire du MVVM.\n    </blockquote>\n\n  <p>\n    Et donc, on s'y est tous mis. De façon purement dogmatique, sans rien y comprendre. Ni le pourquoi, ni le comment. Sans connaître ses véritables raisons d'être, sans en avoir étudié les avantages et contraintes. Sans même avoir conscience qu'il s'agissait d'une architecture logicielle et donc de la fondation de notre applicatif.\n  </p>\n\n  <p>\n    Alors donc, ce fût un grand moment de n'importe quoi où chacun cherchait par tous les moyens à contourner les <i>problèmes</i> posés par MVVM. <strong>Et quand tu commences à considérer ton architecture comme un problème, c'est qu'il y en a un sérieux dans l'équipe de développement</strong>. Bien entendu, les ressources sur le sujet étaient ténues à l'époque et consistaient principalement à la résolution des <i>problèmes</i>&nbsp;apportés par MVVM. Oui, on était tous dans le même bateau.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/33/dans-le-meme-bateau.jpg\" height=\"531\" width=\"940\" alt=\"Les candidats de Koh Lanta sautent du bateau\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/dans-le-meme-bateau-lg.jpg 1024w\">\n      <figcaption>Revenez, ce n'est pas si terrible MVVM !</figcaption>\n    </figure>\n\n  <p>\n    Heureusement, une dizaine d'années plus tard tout cela a bien changé et... hein ? Quoi ? C'est toujours comme ça ? Des équipes qui <i>font du MVVM</i> sans réfléchir, sans le comprendre, juste parce qu'on leur a dit <i>c'est comme ça</i>.\n  </p>\n\n  <p>\n    Il est peut-être temps de prendre un peu de recul et de comprendre à quoi ça sert.\n  </p>\n\n\n    <h2 id=\"mvvm-mais-a-vient-do-\">\n      MVVM, mais ça vient d'où ?\n    </h2>\n\n  <p>\n    Sans refaire un historique complet des technologies Microsoft, sachez qu'avec .NET 3.0 (sorti en 2007 il me semble) est apparu un nouveau paradigme de programmation, en particulier au niveau graphique. Exit les vieilles fenêtres grises figées sur lesquelles on n'avait aucune liberté visuelle et dans lesquelles on mélangeait allègrement l'interface utilisateur et le code métier. Bienvenue à la conception graphique via la technologie <a href=\"https://docs.microsoft.com/en-us/visualstudio/xaml-tools/xaml-overview?view=vs-2019\" target=\"_blank\">XAML</a>. Le développeur s'est alors retrouvé devant deux langages distincts pour traiter l'affichage ou le code :\n  </p>\n\n  <ul>\n    <li>XAML : un langage déclaratif au gout de XML pour décrire l'interface graphique</li><li>Le code (C#, VB.Net...) : pour la logique, le code métier...</li>\n  </ul>\n\n  <p>\n    Voici un exemple de page Xamarin.Forms décrite en XAML :&nbsp;\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             x:Class=\"XamlSamples.MainPage\"&gt;\n\n    &lt;StackLayout&gt;\n        &lt;!-- Place new controls here --&gt;\n        &lt;Label Text=\"Welcome to Xamarin Forms!\"\n               VerticalOptions=\"Center\"\n               HorizontalOptions=\"Center\" /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage&gt;</code></pre>\n\n  <p>\n    Bien entendu, il a fallu d'une façon ou d'une autre faire communiquer code et affichage. C'est pourquoi le concept de <a href=\"https://docs.microsoft.com/en-us/xamarin/xamarin-forms/app-fundamentals/data-binding/\" target=\"_blank\">DataBinding</a> est devenu central avec XAML : les différentes propriétés des contrôles visuels (texte, couleur, visibilité, switch...) sont liées à des propriétés dans le code et reflètent leurs valeurs et changement de valeurs de façon autonome et automatique.\n  </p>\n\n  <p>\n    Par exemple, une liste sera affichée en étant \"bindée\" à une collection dans le code. Une case à cocher sera \"bindée\" à une propriété booléenne...\n  </p>\n\n  <p>\n    Ici, même exemple que précédemment mais le texte du <code>Label</code> est \"bindé\" à la propriété <code>RandomQuote</code> d'une classe. On peut imaginer, par exemple, que <code>RandomQuote</code> est une citation célèbre extraite aléatoirement d'une liste.\n  </p>\n<pre class=\"line-numbers  language-html\"><code>&lt;ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\"\n             xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n             xmlns:local=\"clr-namespace:XamlSamples\"\n             x:Class=\"XamlSamples.MainPage\"&gt;\n\n    &lt;StackLayout&gt;\n        &lt;!-- Place new controls here --&gt;\n        &lt;Label Text=\"{Binding RandomQuote}\"\n               VerticalOptions=\"Center\"\n               HorizontalOptions=\"Center\" /&gt;\n    &lt;/StackLayout&gt;\n&lt;/ContentPage&gt;</code></pre>\n\n  <p>\n    Mais qui est chargé d'exposer la propriété <code>RandomQuote</code> ? Comment les changements de valeurs de cette propriété seront propagés jusqu'au XAML ? Et inversement si la valeur est modifiée par l'utilisateur au niveau de l'interface, comment l'information est remontée dans la classe d'origine ?\n  </p>\n\n  <p>\n    C'est pour répondre à ces questions et architecturer tout ceci que Microsoft a proposé un nouveau modèle (repris depuis un peu partout) : <a href=\"https://fr.wikipedia.org/wiki/Mod%C3%A8le-vue-vue_mod%C3%A8le\" target=\"_blank\">MVVM, c'est-à-dire Model-View-ViewModel</a>.\n  </p>\n\n  <p>\n    <b>Ce qu’il faut en retenir c’est que cette architecture a pour but de découpler les données (Model), la logique (ViewModel) et l’interface utilisateur (View).&nbsp;</b>\n  </p>\n\n  <p>\n    La View est décrite en XAML de façon purement déclarative. Elle dispose tout de même d'un code-behind dans lequel on peut coder en C#, mais cela doit se limiter à du code lié à l'affichage (déclencher une animation par exemple).\n  </p>\n\n  <p>\n    Le Model est la représentation d'une donnée, au sens métier du terme.&nbsp;\n  </p>\n\n  <p>\n    Le ViewModel est la couche intermédiaire qui prépare les données et les expose à la View. C'est généralement là qu'on trouvera la logique de validation des données, l'exécution des calculs, l'appel aux différents services...\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/33/MVVMPattern.png\" height=\"232\" width=\"771\" alt=\"\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/33/responsive/MVVMPattern-xs.png 300w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/MVVMPattern-sm.png 480w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/MVVMPattern-md.png 768w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/MVVMPattern-lg.png 1024w\">\n      \n    </figure>\n\n  <p>\n    Il y a donc un découpage assez net et précis entre ce qui concerne l'affichage, ce qui va stocker les données et ce qui va préparer les données.\n  </p>\n\n  <p>\n    C'est là tout l'enjeu de MVVM, et pour que ça ne parte pas en cacahuètes, il y a bien entendu un certain nombre de règles à respecter.\n  </p>\n\n    <h2 id=\"du-bon-usage-de-mvvm\">\n      Du bon usage de MVVM\n    </h2>\n\n  <p>\n    MVVM, c'est comme un <a href=\"https://fr.wikipedia.org/wiki/Gremlins\" target=\"_blank\">mogwai</a>, ça a l'air tout mignon <strong>tant qu'on suit scrupuleusement les règles</strong>.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/33/guizmo.jpg\" height=\"560\" width=\"1000\" alt=\"Guizmo\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/33/responsive/guizmo-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/guizmo-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/guizmo-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/guizmo-lg.jpg 1024w\">\n      <figcaption>MVVM... tant qu'on respecte les règles !</figcaption>\n    </figure>\n\n    <h3 id=\"principes-de-base\">\n      Principes de base\n    </h3>\n\n  <ol>\n    <li><strong>La View ne se préoccupe que de l'affichage et de l'interaction utilisateur.</strong>&nbsp;Elle ne contient ni ne manipule aucune donnée !</li><li><strong>Le ViewModel est agnostique de la View</strong>. Il ne sait ni quelle vue l'utilise ni comment elle compte le manipuler. Il sert à préparer les données à partir de la couche Model mais ne contient pas, en principe, de logique métier en lui-même.</li><li><b>Le Model est agnostique du ViewModel et de la View</b>. Un Model est parfaitement indépendant du reste du code, il est en mesure de vivre sa vie tout seul. Un Model est réutilisable directement dans un autre projet qui utiliserait la même couche métier, par exemple.</li><li>Ne jamais, mais alors ne jamais le nourrir après minuit !</li>\n  </ol>\n\n  <p>\n    Ok, je vous parle depuis tout à l'heure de View, de Model et de ViewModel, mais tout cela reste bien abstrait, voyons donc ça plus en détails.\n  </p>\n\n    <h3 id=\"le-m-le-v-et-le-vm\">\n      Le M, le V et le VM\n    </h3>\n\n    <h4 id=\"v-comme-viewnbsp\">\n      V comme View&nbsp;\n    </h4>\n\n  <p>\n    La View est un élément visuel, une page par exemple, qui définit la mise-en-page et l'apparence, mais également l'interaction utilisateur (boite de dialogue...).\n  </p>\n\n  <p>\n    La View référence un ViewModel via sa propriété&nbsp;<code>BindingContext</code>. Les contrôles sur la View héritent du BindingContext de la View et sont liés à des propriétés et des commandes exposée par le ViewModel via le système de <code>DataBinding</code>.<br><br>Un DataBinding peut être personnalisé de diverses manières (validation, <a href=\"https://www.sylvainmoingeon.fr/tags/converters/\">converters</a>, changement de BindingContext...) mais nous y reviendrons en détail dans d'autres articles.\n  </p>\n\n  <p>\n    Toute la logique d'affichage qui ne peut pas être directement traitée en XAML est codée dans le code-behind de la page.\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    La View définit le comportement visuel et réagit aux changements d'états du ViewModel.\n  </p>\n\n    <h3 id=\"vm-comme-viewmodel\">\n      VM comme ViewModel\n    </h3>\n\n  <p>\n    Le ViewModel est une classe non visuelle et qui ne référence en aucune façon ni la View ni aucun élément relatif à l'affichage. <strong>Il encapsule la <i>logique de présentation</i> mais pas son affichage</strong>. J'insiste car c'est une règle trop souvent bafouée et qui mène irrémédiablement au monstre spaghetti.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/33/spaghetti.jpg\" height=\"465\" width=\"620\" alt=\"Un beau plat de spaghetti\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/33/responsive/spaghetti-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/spaghetti-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/spaghetti-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/spaghetti-lg.jpg 1024w\">\n      <figcaption>MVVM... quand on commence à référencer la View dans le ViewModel</figcaption>\n    </figure>\n\n  <p>\n    Le ViewModel expose des propriétés et des commandes auxquelles la View se lie par DataBinding : il notifie la View de ses changements d'états à travers l'interface&nbsp;<code>INotifyPropertyChanged</code>.&nbsp;\n  </p>\n\n  <p>\n    En pratique, on crée souvent une classe de base qui implémente <code>INotifyPropertyChanged</code> et dont tous les ViewModels vont hériter. C'est plus simple comme ça.\n  </p>\n\n  <p>\n    Les listes d'objets sont généralement exposées sous forme d'<code>ObservableCollections</code> qui implémentent&nbsp;<code>INotifyCollectionChanged</code> pour informer la View de la suppression ou de l'ajout d'éléments dans la liste.\n  </p>\n\n  <p>\n    Le cas échéant, c'est le ViewModel qui contient la logique propre à l'application (mais pas la logique métier, en principe).\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    Le ViewModel se charge de préparer et de mettre en forme les données pour la View.\n  </p>\n\n    <h3 id=\"m-comme-model\">\n      M comme Model\n    </h3>\n\n  <p>\n    Le Model encapsule les données, la logique métier et la validation, même si c'est sujet à discussion. En pratique, la validation est parfois traitée directement par le ViewModel.\n  </p>\n\n  <p>\n    Les Models ne référencent jamais ni la View, ni le ViewModel. Ce sont des entités indépendantes.\n  </p>\n\n  <p>\n    Ils implémentent la plupart du temps&nbsp;<code>INotifyPropertyChanged</code>.\n  </p>\n\n  <p>\n    En fait, il y a deux écoles :&nbsp;\n  </p>\n\n  <ul>\n    <li>Le ViewModel expose directement les Models et donc ceux-ci implémentent impérativement&nbsp;<code>INotifyPropertyChanged</code></li><li>Le ViewModel encapsule les propriétés des Models et ce sont les propriétés du ViewModel qui sont bindée à la View. Dans ce cas, c'est le ViewModel qui implémente&nbsp;<code>INotifyPropertyChanged</code></li>\n  </ul>\n\n  <p>\n    Qui a raison, qui a tort ? J'ai envie de dire, ça dépend du projet et du modèle de données. A titre personnel, je préfère encapsuler les propriétés dans le ViewModel, c'est bien plus propre : la View ne voit que ce dont elle a besoin.\n  </p>\n\n    <h3 id=\"r-comme-rsum-\">\n      R comme Résumé !\n    </h3>\n\n  <p class=\"msg msg--info\">\n    Pour résumer, le ViewModel prépare et expose des données pour que la View les affiche à l’écran. Mais le ViewModel ne sait pas ce qu’en fait la View, c’est à la View de se débrouiller avec ce que le ViewModel lui fournit.<br><br>Les Models sont indépendants à la fois de la View et du ViewModel. Ce sont eux qui contiennent la logique métier, bien que ce sujet soit ouvert à discussion (la doc Microsoft n'est pas toujours en accord avec elle-même à ce propos !).\n  </p>\n\n    <h3 id=\"avantages-de-mvvm\">\n      Avantages de MVVM\n    </h3>\n\n  <p>\n    Le but de MVVM est de découpler au maximum l'affichage de la logique et la logique des données. Mais pourquoi me direz-vous ?\n  </p>\n\n  <ul>\n    <li>Pour rendre la logique (ViewModels) et les données (Models) unitairement testables sans avoir d'interaction avec l'interface.</li><li>Pour rendre l'interface graphique testable indépendamment des données ! On peut, en effet, <em>mocker</em> les ViewModels et injecter des données de test directement dans la vue !</li><li>Pour éviter que les données encapsulent la logique métier / Pour éviter que la présentation des données encapsule la logique métier (rayez la mention inutile)</li><li>Pour élargir le <a href=\"https://fr.wikipedia.org/wiki/Principe_de_responsabilité_unique\" target=\"_blank\">Principe de Responsabilité Unique</a> à l'affichage et à la présentation des données.</li><li>Pour éviter qu'une modification au niveau de l'affichage ait des répercussions sur le code (ceux qui ont codé en VB6 savent de quoi je parle...)</li><li>Pour rendre le code modulable et réutilisable, en particulier la couche métier.</li><li>Dans le monde des bisounours, on dit aussi que ça permet aux designers et aux développeurs de travailler séparément sans avoir à attendre que l'un ou l'autre ait terminé sa tâche. Dans le vrai monde, euh, vous avez un designer qui ne s'occupe que de dessiner les interfaces dans votre équipe ?</li><li>Pour rendre l'architecture du code lisible, on sait quoi va où</li><li>Pour rendre le code maintenable : il est découpé en briques élémentaires indépendantes. En modifier une n'aura pas de répercussions inattendues à l'autre bout du code</li><li>Pour éviter de <a href=\"https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/\">coller des crottes de nez</a> dans le code.</li>\n  </ul>\n\n  <p class=\"msg msg--highlight\">\n    Pour résumer, MVVM c'est une place pour chaque chose et chaque chose à sa place.<br>L'idéal est que chaque Model n'ait aucune dépendance vis-à-vis des ViewModels et des Views et que chaque ViewModels n'ait aucune dépendance vis-à-vis des Views.\n  </p>\n\n    <h3 id=\"les-contraintes-de-mvvm\">\n      Les contraintes de MVVM\n    </h3>\n\n  <p>\n    Alors, MVVM, c'est tout beau tout rose ?\n  </p>\n\n  <p>\n    Evidemment, raconté comme ça, ça a l'air d'être la panacée. En réalité, <b>MVVM est une architecture logicielle</b> et vient donc avec un certain nombre de règles et de contraintes.\n  </p>\n\n  <p>\n    C'est comme le code de la route. Il est là pour garantir la sécurité de tous et éviter les accidents, mais cela ne vient pas sans quelques restrictions à nos libertés (s'arrêter au rouge, ne pas rouler à contresens...).\n  </p>\n\n  <p>\n    La principale question qui se pose quand on se lance pour la première fois dans un projet architecturé autour de MVVM, c'est comment gérer les interactions utilisateurs dans le ViewModel.\n  </p>\n\n  <p>\n    Je vous donne un exemple, sans doute le premier auquel vous serez confronté : je clique sur un bouton <code>SUPPRIMER</code>, une boite de dialogue me demande de confirmer avant suppression. Simple n'est-ce pas ? Sauf que le code de suppression est dans le ViewModel, que la commande liée au bouton s'y exécute directement et donc, comment fait-on pour afficher une boite de dialogue quand on est dans un ViewModel qui ne doit rien savoir de l'affichage ?\n  </p>\n\n  <p>\n    Eh bien, ce n'est pas simple !\n  </p>\n\n  <p>\n    Et là, deux écoles s'affrontent :&nbsp;\n  </p>\n\n  <ul>\n    <li>Ceux qui savent pourquoi ils utilisent MVVM et cherchent à continuer à en respecter les principes et bonnes pratiques. Cela demande plus de travail, cela demande de réellement réfléchir à l'architecture de l'application, mais ça assure une application bien structurée et maintenable dans le temps</li><li>Ceux qui ne se souviennent plus (ou n'ont jamais su) pourquoi ils utilisent MVVM et cherchent a résoudre le <i>problème</i> par toutes les plus mauvaises solutions qui soient. Celles qu'ils considèrent comme plus simples et rapides et qui au final transforment le code en un Gremlins qui au fil du temps est de plus en plus incontrôlable.</li>\n  </ul>\n\n    <figure class=\"post__image post__image--center\">\n      <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/33/Gremlins.jpg\" height=\"1337\" width=\"2000\" alt=\"Le chef des Gremlins revisite massacre à la tronçonneuse\"  sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/33/responsive/Gremlins-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/Gremlins-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/Gremlins-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/33/responsive/Gremlins-lg.jpg 1024w\">\n      <figcaption>MVVM... quand tu ne respectes pas les règles !</figcaption>\n    </figure>\n\n  <p>\n    Un exemple très simple, rencontré personnellement sur un projet :\n  </p>\n\n  <p>\n    Une page de l'application freezait de façon <i>inexplicable</i>. Je n'ai pas mis longtemps à lever le lièvre : la View était injectée dans le ViewModel !\n  </p>\n\n  <p>\n    Cette violation directe de MVVM a conduit à un effet extrêmement pervers : un <a href=\"https://fr.wiktionary.org/wiki/deadlock\" target=\"_blank\">deadlock</a>. En fait, le ViewModel exécutait une méthode déclarée dans le code-behind de la View qui elle-même exécutait une méthode du ViewModel qui attendait un résultat de la View ! Et patatra ! Les pieds dans le tapis !\n  </p>\n\n  <p>\n    Cela a été corrigé en redécoupant proprement le code. Certes, cela a demandé plus de réflexion et mis plus de temps que le code départ qui était <i>plus simple et plus rapide </i>à mettre en place. Mais maintenant ça fonctionne et <b>surtout ça continue de fonctionner</b>&nbsp;malgré les évolutions de l'application ! Au final, <b>prendre son temps fait gagner du temps</b>.\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    En fait, le véritable défi avec MVVM est d'assurer la communication entre les différentes couches tout en prenant soin qu'elles ne se référencent pas les unes et les autres.\n  </p>\n\n    <h2 id=\"conclusion\">\n      Conclusion\n    </h2>\n\n  <p>\n    Il y a encore beaucoup à dire sur MVVM mais cet article est déjà bien trop long et je souhaitais rester à un certain niveau d'abstraction, n'aborder que les concepts de base.\n  </p>\n\n  <p>\n    J'espère que vous comprenez mieux les enjeux de MVVM, ses raisons d'être.\n  </p>\n\n  <p>\n    Si vous avez des questions ou si vous n'êtes pas d'accord (vous avez le droit !) laissez-moi un commentaire !\n  </p>\n\n  <p class=\"msg msg--highlight\">\n    Je voudrais juste terminer en précisant que MVVM est un choix d'architecture, pas quelque chose qu'on vous impose et qu'il faut contourner !<strong><br><br>Si MVVM ne vous convient pas, il existe des alternatives. Plutôt que massacrer MVVM, trouvez l'architecture qui convient à votre projet !</strong>\n  </p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/33/question-mark.jpg",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "bonnes pratiques",
                   "Xamarin.Forms",
                   "XAML",
                   "MVVM"
            ],
            "date_published": "2020-09-04T19:15:55+02:00",
            "date_modified": "2020-09-07T14:26:07+02:00"
        },
        {
            "id": "https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/",
            "url": "https://www.sylvainmoingeon.fr/developpez-des-applications-sans-crotte-de-nez/",
            "title": "Développez des applications sans crotte de nez !",
            "summary": "<p>Récemment, j’ai entendu un développeur tenir les propos suivants :</p><blockquote>\n<p>Non mais ça ne sert à rien de faire du bon code, tout ce que le client demande c’est que ça fonctionne.</p></blockquote>\n<p>Et malheureusement, sur la deuxième partie de l’assertion il n’a pas tort. Mais c’est parce que le client ne connait pas le métier et n’a aucune idée des répercussions sur le moyen/long terme d’un code de mauvaise qualité. Alors il faut que ça cesse ! </p><p>Et si au lieu de profiter de la situation pour justifier du travail de sagouin, on en profitait plutôt pour prendre ses responsabilités ?</p>",
            "content_html": "<p>Récemment, j’ai entendu un développeur tenir les propos suivants :</p><blockquote>\n<p>Non mais ça ne sert à rien de faire du bon code, tout ce que le client demande c’est que ça fonctionne.</p></blockquote>\n<p>Et malheureusement, sur la deuxième partie de l’assertion il n’a pas tort. Mais c’est parce que le client ne connait pas le métier et n’a aucune idée des répercussions sur le moyen/long terme d’un code de mauvaise qualité. Alors il faut que ça cesse ! </p><p>Et si au lieu de profiter de la situation pour justifier du travail de sagouin, on en profitait plutôt pour prendre ses responsabilités ?</p>\n\n<h1 id=\"être-vraiment-professionnel\">Être vraiment professionnel</h1>\n<p>Laissez-moi vous raconter une histoire :</p><p>Vous vous rendez à la boulangerie, ça sent bon le pain chaud, la baguette est bien dorée, croustillante à l’extérieur, moelleuse à l’intérieur, une véritable baguette 100% fonctionnelle. Vous en salivez déjà.</p><p>Et maintenant, si je vous raconte que j’ai surpris le boulanger la main dans le froc en train de se gratter l’anus pendant qu’il pétrissait la pâte. Toujours envie de vous en faire des tartines ?</p><p>Livrer une baguette seulement <em>fonctionnelle</em> est-ce vraiment tout ce qu’on demande à un artisan boulanger ? Non, on exige de lui qu’il prépare son pain dans les règles de l’art, en respectant les bonnes pratiques de son métier et en suivant scrupuleusement les règles sanitaires.</p><p>Si je vous raconte qu’en cette période de crise covid19, votre boulanger travaille sans porter de masque et en éternuant allégrement sur la pâte des croissants qu’il est en train de préparer. Vous voyez la scène ? Un gros <em>ATCHOUM</em> accompagné d’un feu d’artifice de postillons et de sécrétions nasales qui viennent se déposer gaiement un peu partout dans la pâte. Mmmm, <em>un délice</em>. Vous en pensez quoi ? Sérieusement ? C’est professionnel comme comportement ?</p><p>Ça vous dit un croissant totalement fonctionnel aromatisé à la crotte de nez ?</p><figure class=\"post__image\">\n    <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/30/croissants.jpg\" alt=\"Croissants dans un panier - Image par Pexels de Pixabay\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/30/responsive/croissants-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/croissants-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/croissants-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/croissants-lg.jpg 1024w\"></img>\n    <figcaption>Ce serait dommage d'y trouver des crottes de nez, n'est-ce-pas ?</figcaption>\n</figure>\n\n<p>Bien entendu, vous avez parfaitement le droit de répondre oui et de trouver que c’est normal de travailler comme ça tout en prétendant être un professionnel du métier. Mais je n’irai pas manger chez vous ni vous recommander auprès de mes clients !</p><p>Parce qu’un produit fonctionnel, c’est juste le B-A-BA, c’est le niveau zéro du métier. C’est ce qu’on demande de produire à un étudiant pour son projet de première année. Juste un truc qui marche. Mais être professionnel, c’est un peu plus que ça non ? Non !?</p><h1 id=\"artisan-développeur\">Artisan développeur</h1>\n<p>Bien entendu, je ne prétends pas que tout est toujours parfait, peut-être le boulanger va-t-il y laisser un poil de bras ou une goutte de sueur. On ne peut pas tout prévoir, on n’est pas toujours au top. Parfois aussi on se trompe, c’est humain. Je vous le dis discrètement, ça reste entre nous, mais on n’a pas non plus la science infuse. Parfois on ne sait pas bien faire et on aurait pu faire mieux. </p><p>Alors quoi ?</p><p>Alors, on prend soin de respecter au mieux les bonnes pratiques, on se forme, on s’exerce, on ne se cache pas derrière un <em>de toute façon le client attend juste que ça fonctionne</em>. On se comporte comme un véritable artisan du code.</p><p>C’est-à-dire que s’il y a des bugs, c’est accidentel. Si le code lève une <em>exception</em>, c’est parce qu’on a rencontré un cas <em>exceptionnel</em> (le terme d’<em>exception</em> n’a pas été choisi par hasard).</p><p>Un bug issu de <em>l’erreur humaine</em> est acceptable. Un bug issu de <em>non mais ce n’est pas la peine de coder proprement il suffit juste que ça fonctionne</em> est juste inacceptable. Vous saisissez la nuance ?</p><p>Autrement dit, on évite autant que possible d’éternuer sur le clavier et de laisser des crottes de nez partout dans le code.</p><h1 id=\"cest-quoi-une-crotte-de-nez-dans-le-code--il-est-où-le-problème-\">C’est quoi une crotte de nez dans le code ? Il est où le problème ?</h1>\n<p>Je pourrais écrire une thèse sur le sujet mais, que vous soyez développeur ou que vous ayez un projet de développement, je vous recommande plutôt la lecture du fantastique <a href=\"https://amzn.to/3gj03ST\" title=\"Lien vers le livre The Pragmatic Programmer\">The Pragmatic  Programmer, from journeyman to master</a> de Andrew Hunt et David Thomas.</p><figure class=\"post__image\">\n    <a href=\"https://amzn.to/3gj03ST\"![Image description](https://www.sylvainmoingeon.fr/media/posts/30/atchoum.jpg =5760x3840)>\n    <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/30/the-pragmatic-programmer.jpg\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/30/responsive/the-pragmatic-programmer-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/the-pragmatic-programmer-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/the-pragmatic-programmer-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/the-pragmatic-programmer-lg.jpg 1024w\"></img>\n    </a>\n    <figcaption>The Pragmatic  Programmer, from journeyman to master</figcaption>\n</figure>\n\n<p>Ce livre qui date de plus d’une vingtaine d’années reste complètement d’actualité tant les thèmes qu’il aborde sont tranverses au développement informatique et se basent avant tout sur les bonnes pratiques et surtout les risques de ne pas les suivre.</p><p>Vous y apprendrez par exemple pourquoi en vertu de <em><a href=\"https://fr.wikipedia.org/wiki/Hypoth%C3%A8se_de_la_vitre_bris%C3%A9e\" title=\"Lien vers l&#39;article Wikipédia sur l&#39;hypothèse de la vitre brisée\">l’hypothèse de la vitre brisée</a></em>, si un développeur laisse traîner quelques crottes de nez par-ci par-là, le code finira irrémédiablement recouvert de sécrétions nasales.</p><p>Et en informatique, une crotte de nez peut avoir des répercussions graves.</p><p>En fait, une crotte de nez dans le code, c’est ce truc-là, qu’on ne voit pas de l’extérieur, qui ne semble pas influer sur le fonctionnel du point de vue de l’utilisateur mais qui, dans certains cas, laisse un arrière-goût plutôt désagréable.</p><p>Comme oublier de crypter des mots de passe. Je veux dire, au niveau du code, ce n’est pas grand-chose, hein (ah si ?). On oublie juste de passer le mot de passe dans la moulinette, rien de très grave en soit, personne ne s’en rend compte, tout est parfaitement fonctionnel. Et puis, un beau jour, c’est le scandale…</p><ul>\n<li><a href=\"https://www.commentcamarche.net/news/5872520-facebook-stockait-des-centaines-de-millions-de-mots-de-passe-en-clair\" title=\"Lien vers un article qui explique que Facebook stockait des millions de mot de passe en clair\">Facebook stockait des millions de mot de passe instagram en clair</a></li>\n<li><a href=\"https://www.cnetfrance.fr/news/oups-google-a-stocke-en-clair-des-mots-de-passe-durant-des-annees-39884993.htm\" title=\"Lien vers un article qui explique que Google stockait des millions de mot de passe en clair\">Petite crotte de nez chez Google : des mots de passe stockés en clair pendant des années</a></li>\n</ul>\n<p>J’ai une autre anecdote sympa, c’est cocasse vous allez voir. J’ai assisté à une scène surréaliste ou un développeur a voulu montrer à un opérateur comment supprimer des données dans la base clients. Jusque-là, rien de dramatique, on manipule des données, on les insère, on les modifie, on les supprime, c’est la raison d’être des bases de données.</p><p>Sauf qu’il a, par mégarde, sélectionné l’ensemble des données d’une table. Et que cette table avait une relation directe ou indirecte avec l’ensemble de toutes les autres tables de la base de données.</p><p>Vous voyez le coup venir ? Une crise d’éternuement en approche !</p><figure class=\"post__image\">\n    <img decoding=\"async\" loading=\"lazy\" src=\"https://www.sylvainmoingeon.fr/media/posts/30/atchoum-2.jpg\" alt=\"Femme sur le point d'éternuer\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https://www.sylvainmoingeon.fr/media/posts/30/responsive/atchoum-2-xs.jpg 300w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/atchoum-2-sm.jpg 480w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/atchoum-2-md.jpg 768w ,https://www.sylvainmoingeon.fr/media/posts/30/responsive/atchoum-2-lg.jpg 1024w\"></img>\n    <figcaption>Noooon, pas dans le code !</figcaption>\n</figure>\n\n<p>Dans le meilleur des mondes, il aurait dû y avoir une boite de dialogue de confirmation de suppression au niveau applicatif. Il aurait dû y avoir un contrôle au niveau de la base de données, en particulier sur une table critique comme celle-ci.</p><p>Mais voilà, la boite de dialogue est restée engluée dans une flaque de morve et la base de donnée a <strong>supprimé toutes les données en cascade</strong> sans broncher.</p><p>Quand le développeur a demandé, l’espoir dans l’âme, <em>Ce n’est rien, nous allons restaurer les données, vous avez bien une sauvegarde récente ?</em>, l’opérateur a constaté que les scripts de sauvegarde ne tournaient plus depuis des semaines, sans envoyer les messages d’avertissement prévus dans ce cas. La faute à une crotte de nez. Encore.</p><h1 id=\"conclusion\">Conclusion</h1>\n<p>Être professionnel, ce n’est pas seulement produire du code fonctionnel, c’est aussi garantir une <strong>qualité</strong>, une <strong>pérennité</strong>, une <strong>évolutivité</strong> du code. C’est-à-dire un code qui fonctionne aujourd’hui et continuera de fonctionner demain, même après modification.</p><p>Je pourrais également parler de <strong>stabilité</strong> (ça fonctionne mais c’est un peu bancal), de <strong>fiabilité</strong> (ça fonctionne très bien… quand ça fonctionne), ou de <strong>performance</strong> (ça fonctionne mais il faut être patient, très patient).</p><p>Ou encore, insister sur la <strong>lisibilité</strong> d’un code que d’autres développeurs n’auront pas de mal à lire et à comprendre. D’un code qui <em>coule de source</em> (ah ah ah) dans lequel les autres n’auront pas peur de mettre les mains. J’ai failli dire les doigts… dans le nez, bien entendu.</p><blockquote>\n<p>Code toujours comme si la personne qui va maintenir ton code est un violent psychopathe qui sait où tu habites.</p><p><em>John F. Woods</em></p></blockquote>\n<p>Alors évidemment, comme je l’ai dit, on ne pas toujours être au top, on va parfois laisser quelques gouttes de sueurs perler dans la farine, le pain sera un peu moins cuit ou la pâte moins croustillante que d’habitude. C’est comme ça, c’est la vie.</p><p><strong>Mais s’il vous plait, cessez de vous gratter le cul ou de vous curer le nez en bossant sous prétexte que ça ne va pas se voir !</strong></p>",
            "image": "https://www.sylvainmoingeon.fr/media/posts/30/hands.jpg",
            "author": {
                "name": "Sylvain"
            },
            "tags": [
                   "software craftsmanship",
                   "professionnalisme",
                   "bonnes pratiques"
            ],
            "date_published": "2020-08-26T16:22:07+02:00",
            "date_modified": "2020-08-26T16:22:07+02:00"
        }
    ]
}
